{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/Hacker/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/images/icon-heart.svg","path":"images/icon-heart.svg","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/base/normalize.css","path":"css/base/normalize.css","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/archive.styl","path":"css/components/archive.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/article.styl","path":"css/components/article.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/categories.styl","path":"css/components/categories.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/footer.styl","path":"css/components/footer.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/header.styl","path":"css/components/header.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/icon.styl","path":"css/components/icon.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/layout.styl","path":"css/components/layout.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/pagination.styl","path":"css/components/pagination.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/responsive.styl","path":"css/components/responsive.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/syntax.styl","path":"css/components/syntax.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/tags.styl","path":"css/components/tags.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"7e4c5a7210abd21bcd63d3206be401008d4919f8","modified":1603090390680},{"_id":"source/_posts/JWT-default-claims.md","hash":"0fd074fea6380d30e4adc03de3e47ff4a3c4daa0","modified":1603090390680},{"_id":"source/_posts/devops-ci-cd-with-rancher.md","hash":"eb32febc5e931000534ddd8056e8d87ed0dda992","modified":1603090390680},{"_id":"source/_posts/iterm2-with-oh-my-zsh.md","hash":"95bb345335ec690174ff904014c9dc65da359840","modified":1603090390680},{"_id":"source/categories/index.md","hash":"c3356db0c780c4c820c5d0c234dd7ab4d955f427","modified":1603090390680},{"_id":"source/tags/index.md","hash":"c819aace33cb7c76dbba0051327d08d2446101d5","modified":1603090390680},{"_id":"source/favicon.ico","hash":"c3f11b8c097b68a3b9c0e7aec12aef95fb649c58","modified":1603090390680},{"_id":"themes/Hacker/.gitignore","hash":"c57cf4e0d24c5db09716f924a45ad879650f7548","modified":1603092793950},{"_id":"themes/Hacker/CHANGELOG.md","hash":"5ee7ae48cc5308758894eb961caaef89ecc04048","modified":1603092793950},{"_id":"themes/Hacker/CHANGELOG_zh-CN.md","hash":"5055c0a138469e673b3136c60033c5ae30a32787","modified":1603092793950},{"_id":"themes/Hacker/LICENSE","hash":"3127907a7623734f830e8c69ccee03b693bf993e","modified":1603092793950},{"_id":"themes/Hacker/README.md","hash":"70ce861aa3c2a4ef52dc4ace8fe1a012ea4afccd","modified":1603092793950},{"_id":"themes/Hacker/README_zh-CN.md","hash":"2bc68ac0164097ef016ce41073e8cf1bb6978bd7","modified":1603092793950},{"_id":"themes/Hacker/_config.example.yml","hash":"7f612745ad6a14a746750cbcafc98689ccdb6986","modified":1603092793950},{"_id":"themes/Hacker/languages/default.yml","hash":"d4466fb0a6102e50777ee56957f78de696891a0e","modified":1603092793950},{"_id":"themes/Hacker/languages/zh-CN.yml","hash":"d822b531c8e0edd5e1ae85ac3de96017e4781b3f","modified":1603092793950},{"_id":"themes/Hacker/layout/archive.ejs","hash":"2238cbe29009aafb16969d2c70dceb3f71772123","modified":1603092793950},{"_id":"themes/Hacker/layout/categories.ejs","hash":"bfad4e7eade650c535f0194974e2646619657b8b","modified":1603092793950},{"_id":"themes/Hacker/layout/index.ejs","hash":"1d2c487a95d25e763b5f7e004194eb6ee6b18135","modified":1603092793950},{"_id":"themes/Hacker/layout/layout.ejs","hash":"1bd1ff49fb17548b934e0664ba6cefd60b086fa9","modified":1603092793950},{"_id":"themes/Hacker/layout/page.ejs","hash":"84e00bbcc643dff4bd02880b3bbea658f510835f","modified":1603092793950},{"_id":"themes/Hacker/layout/post.ejs","hash":"84e00bbcc643dff4bd02880b3bbea658f510835f","modified":1603092793950},{"_id":"themes/Hacker/layout/tags.ejs","hash":"ee89e6a9c14bdb5e5e8cf975a558c780fe8dabff","modified":1603092793950},{"_id":"themes/Hacker/layout/components/archive.ejs","hash":"1f79ebaf52b8229cf5c58bb8325cf0177859a05c","modified":1603092793950},{"_id":"themes/Hacker/layout/components/article.ejs","hash":"593ea968cf4e5c128b0adb8e3ae3ea0f0b9a97bf","modified":1603092793950},{"_id":"themes/Hacker/layout/components/baiduanalytics.ejs","hash":"75ea315908beaf390265e00167cf8a30b5d0d94a","modified":1603092793950},{"_id":"themes/Hacker/layout/components/categories.ejs","hash":"3665bf5d1c7181db22dc1c48d62ebf42757d8c27","modified":1603092793950},{"_id":"themes/Hacker/layout/components/comment.ejs","hash":"440323abbe7af9aa3d46ca03ef2b69eb9d369ace","modified":1603092793950},{"_id":"themes/Hacker/layout/components/footer.ejs","hash":"a913715b246513a95c9d4bddb067f5dae3ceea01","modified":1603092899830},{"_id":"themes/Hacker/layout/components/googleanalytics.ejs","hash":"fa11251ace0fc61cbcffb74f32fbf5bdbb201ff2","modified":1603092793950},{"_id":"themes/Hacker/layout/components/head.ejs","hash":"10475fdfc513c9380f18d034e15b3b051c8e9269","modified":1603092793950},{"_id":"themes/Hacker/layout/components/pagination.ejs","hash":"4ab5e3b0239e467923a0f91c771bcc9ee7889cfe","modified":1603092793950},{"_id":"themes/Hacker/layout/components/header.ejs","hash":"929a8eafa278d49c2f41d3581e2608eca80d7856","modified":1603092793950},{"_id":"themes/Hacker/source/css/style.styl","hash":"208e5f6d010e4e2c5590dae5e4fca8de592d3ef1","modified":1603092793950},{"_id":"themes/Hacker/source/images/icon-heart.svg","hash":"ec483e96c88eea013fd8ac71a34a875107397f43","modified":1603092793950},{"_id":"themes/Hacker/source/css/base/normalize.css","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1603092793950},{"_id":"themes/Hacker/source/css/components/archive.styl","hash":"3ebb7790a46587297966f200fb4fcdbba25269df","modified":1603092793950},{"_id":"themes/Hacker/source/css/components/article.styl","hash":"f613fc6ed4dec8171bf7a03bd8878eaa995082bb","modified":1603092793950},{"_id":"themes/Hacker/source/css/components/categories.styl","hash":"c67e20d60351295cb178b568af42d430f4bcc3e6","modified":1603092793950},{"_id":"themes/Hacker/source/css/components/footer.styl","hash":"80ef890252d31d3bbfe71740fdcfc54ae14cad8e","modified":1603092793950},{"_id":"themes/Hacker/source/css/components/header.styl","hash":"fa5e6d715d288a327406df78225284c70530cb98","modified":1603092793950},{"_id":"themes/Hacker/source/css/components/icon.styl","hash":"8da3ff5b6cd1609fdfe0c564d47391367abc8808","modified":1603092793950},{"_id":"themes/Hacker/source/css/components/layout.styl","hash":"9c6e6bc00f377666f6815bc5e23438893357f8f6","modified":1603092793950},{"_id":"themes/Hacker/source/css/components/pagination.styl","hash":"1cec6cb1835f99432cc5c6ba674782237fea4f95","modified":1603092793950},{"_id":"themes/Hacker/source/css/components/responsive.styl","hash":"053e7ec4c22845422440660b7e1d6b0dea5b4fbd","modified":1603092793950},{"_id":"themes/Hacker/source/css/components/syntax.styl","hash":"8c0d919322194dc295e5404bcd68949f962f88dc","modified":1603092793950},{"_id":"themes/Hacker/source/css/components/tags.styl","hash":"684cf4eb4b8671476365e955dceebf096cc0e6ed","modified":1603092793950},{"_id":"public/categories/index.html","hash":"a9d08c43b9691686ac9344dfc9bdfb233e15c285","modified":1603093229533},{"_id":"public/tags/index.html","hash":"e3bf9230b8971c11cfc66562e075da4f598ed973","modified":1603093229533},{"_id":"public/JWT-default-claims/index.html","hash":"c758a235c1e7351d33666d13b574e9a896fd391d","modified":1603093229533},{"_id":"public/iterm2-with-oh-my-zsh/index.html","hash":"99c655e9e6cbd8a032184dc70a78a0ca9de9f3ea","modified":1603093229533},{"_id":"public/devops-ci-cd-with-rancher/index.html","hash":"2d965d7684533f295c55680bcdd670f64be768d3","modified":1603093229533},{"_id":"public/archives/index.html","hash":"4fa676e1ceddd3333c00ad7d66f554c723169575","modified":1603093229533},{"_id":"public/archives/2018/index.html","hash":"60057e7b1dc83ee2673aa3d8ea3ae349cd18b5ec","modified":1603093229533},{"_id":"public/archives/2018/02/index.html","hash":"584b95cb6034322c740d51f83a26b84c35fd7581","modified":1603093229533},{"_id":"public/archives/2018/05/index.html","hash":"fa7c444944b5796ef45aa1e305446b89b4150a7a","modified":1603093229533},{"_id":"public/archives/2018/07/index.html","hash":"f40eb9262beb1c475bb89e0bb826de3756aee39b","modified":1603093229533},{"_id":"public/categories/个人/index.html","hash":"6d578a5e824e69544c95835e9b9e16492d51ea68","modified":1603093229533},{"_id":"public/tags/jwt/index.html","hash":"312d11acee48a0491d4d4f279fd2d0a74b58cc07","modified":1603093229533},{"_id":"public/tags/develop/index.html","hash":"074ca0d370f19dca1dcc4dd5b074b6810a6f22e2","modified":1603093229533},{"_id":"public/tags/bash/index.html","hash":"3c9337de33d9bb57c53a36cd54079e5170c83a03","modified":1603093229533},{"_id":"public/tags/iterm2/index.html","hash":"09b4f44b4628ee8b79e1452453da58d1dc100215","modified":1603093229533},{"_id":"public/tags/zsh/index.html","hash":"013a3e37832e2ac4a5b4014993797cf15b41ff72","modified":1603093229533},{"_id":"public/tags/shell/index.html","hash":"aab5958d6caabcedffc45b5931624bf33112c769","modified":1603093229533},{"_id":"public/tags/devops/index.html","hash":"db1914899bb45ef4cd11eaa817c9c97fac690f97","modified":1603093229533},{"_id":"public/tags/rancher/index.html","hash":"77cfb3454dbfb9a01d294ec397b5cd8cc1b16b30","modified":1603093229533},{"_id":"public/tags/docker/index.html","hash":"bb520fd418919116247ab8d27db3bb14cf939199","modified":1603093229533},{"_id":"public/tags/ci/index.html","hash":"7548cc6d6b851b1b87d57cf7afb53bef6b42dbd0","modified":1603093229533},{"_id":"public/tags/cd/index.html","hash":"1b1e83507ba67f0865bfc9e9c013855d454f565e","modified":1603093229533},{"_id":"public/index.html","hash":"2708aabbd0e0ae7b0801e3d5bf142e30593310a7","modified":1603093229533},{"_id":"public/CNAME","hash":"7e4c5a7210abd21bcd63d3206be401008d4919f8","modified":1603093229533},{"_id":"public/images/icon-heart.svg","hash":"ec483e96c88eea013fd8ac71a34a875107397f43","modified":1603093229533},{"_id":"public/favicon.ico","hash":"c3f11b8c097b68a3b9c0e7aec12aef95fb649c58","modified":1603093229533},{"_id":"public/css/style.css","hash":"9be8fa31f5f484cab1cb4fd4752ea15619580271","modified":1603093229533},{"_id":"public/css/base/normalize.css","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1603093229533},{"_id":"public/css/components/archive.css","hash":"cea7d6edd8221c00602a799e67046365b2ad929e","modified":1603093229533},{"_id":"public/css/components/article.css","hash":"3a1316dbf86a4f52cf8da789f3a13e94504dee76","modified":1603093229533},{"_id":"public/css/components/categories.css","hash":"f181d27640f1408f032c5386836c4c2322724f8d","modified":1603093229533},{"_id":"public/css/components/footer.css","hash":"602def895fd52f288b6e93932284aa2e52b7fee0","modified":1603093229533},{"_id":"public/css/components/header.css","hash":"51f8a4c736f3b180a7c4c8f804d8060031df6a34","modified":1603093229533},{"_id":"public/css/components/icon.css","hash":"cdaf1a152184ff7def760f14095e4a2fa16cd6bd","modified":1603093229533},{"_id":"public/css/components/layout.css","hash":"7bffe71c7aba90b2fc5bc6dc1457db50018c7a6f","modified":1603093229533},{"_id":"public/css/components/pagination.css","hash":"88f7519c0c8ff96b436413528d5f568a4f3d2177","modified":1603093229533},{"_id":"public/css/components/responsive.css","hash":"216eb94fc69007de995fc8d382670ba00a9574e8","modified":1603093229533},{"_id":"public/css/components/syntax.css","hash":"80de949e0928eb18957f63e7435877085ca626fb","modified":1603093229533},{"_id":"public/css/components/tags.css","hash":"1566e94c23ae19dbfc7d2cf433e68242ed657dea","modified":1603093229533}],"Category":[{"name":"个人","_id":"ckgg8680g0003exx41mjy1ug1"}],"Data":[],"Page":[{"title":"categories","date":"2018-05-24T09:16:04.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-05-24 17:16:04\nlayout: \"categories\"\n---\n","updated":"2020-10-19T06:53:10.680Z","path":"categories/index.html","comments":1,"_id":"ckgg8680a0000exx40684fxkt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-05-24T09:18:27.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-05-24 17:18:27\nlayout: \"tags\"\n---\n","updated":"2020-10-19T06:53:10.680Z","path":"tags/index.html","comments":1,"_id":"ckgg8680e0002exx4g5nx6n61","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JWT(Json Web Token)中默认的声明含义","date":"2018-07-19T07:02:26.000Z","_content":"\n本文参考资料：\n\nhttps://tools.ietf.org/html/rfc7519#section-4.1\n\n<!-- more --> \n\n按照JWT协议的说法，默认的声明是可选的，目前是为了提供参考、增加payload效能，同时为各语言的实现提供参考。\n\n## iss(Issuer)\n\njwt的颁发者，其值应为大小写敏感的字符串或Uri。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\"\n}\n```\n\n## aud(Audience)\n\njwt的适用对象，其值应为大小写敏感的字符串或Uri。一般可以为特定的App、服务或模块。\n\n比如我们颁发了一个jwt给一个叫\"JsonWebToken\"的app使用，sub可以是这个app的包签名或者标识。\n\n服务器端的安全策略在签发时和验证时，aud必须是一致的。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\",\n    \"aud\": \"com.llbetter.JsonWebToken\"\n}\n```\n\n## sub(Subject)\n\njwt\b的所有者，可以是用户ID、唯一标识。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\",\n    \"aud\": \"com.llbetter.JsonWebToken\",\n    \"sub\": \"10000\" // user id\n}\n```\n\n## exp(Expiration Time) \n\njwt的过期时间，必须是可以解析为时间/时间戳的数字类型。服务器端在验证当前时间大于过期时间时，应当验证不予通过。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\",\n    \"aud\": \"com.llbetter.JsonWebToken\",\n    \"sub\": \"10000\", // user id\n    \"exp\": 1516239022\n}\n```\n\n## nbf(Not Before)\n\n表示jwt在这个时间后启用。同exp一样，需为可以解析成时间的\b数字类型。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\",\n    \"aud\": \"com.llbetter.JsonWebToken\",\n    \"sub\": \"10000\", // user id\n    \"exp\": 151239022,\n    \"nbf\": 151139022\n}\n```\n\n## iat(Issued At)\n\njwt的签发时间。同exp一样，需为可以解析成时间的\b数字类型。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\",\n    \"aud\": \"com.llbetter.JsonWebToken\",\n    \"sub\": \"10000\", // user id\n    \"exp\": 151239022,\n    \"nbf\": 151139022,\n    \"iat\": 151039022\n}\n```\n\n## jti(JWT ID)\n\n签发jwt时给予当前token的唯一ID，通常用于一次性消费的token。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\",\n    \"aud\": \"com.llbetter.JsonWebToken\",\n    \"sub\": \"10000\", // user id\n    \"exp\": 151239022,\n    \"nbf\": 151139022,\n    \"iat\": 151039022,\n    \"jti\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n```","source":"_posts/JWT-default-claims.md","raw":"---\ntitle: JWT(Json Web Token)中默认的声明含义\ndate: 2018-07-19 15:02:26\ntags: [jwt,develop]\ncategories: [个人]\n---\n\n本文参考资料：\n\nhttps://tools.ietf.org/html/rfc7519#section-4.1\n\n<!-- more --> \n\n按照JWT协议的说法，默认的声明是可选的，目前是为了提供参考、增加payload效能，同时为各语言的实现提供参考。\n\n## iss(Issuer)\n\njwt的颁发者，其值应为大小写敏感的字符串或Uri。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\"\n}\n```\n\n## aud(Audience)\n\njwt的适用对象，其值应为大小写敏感的字符串或Uri。一般可以为特定的App、服务或模块。\n\n比如我们颁发了一个jwt给一个叫\"JsonWebToken\"的app使用，sub可以是这个app的包签名或者标识。\n\n服务器端的安全策略在签发时和验证时，aud必须是一致的。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\",\n    \"aud\": \"com.llbetter.JsonWebToken\"\n}\n```\n\n## sub(Subject)\n\njwt\b的所有者，可以是用户ID、唯一标识。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\",\n    \"aud\": \"com.llbetter.JsonWebToken\",\n    \"sub\": \"10000\" // user id\n}\n```\n\n## exp(Expiration Time) \n\njwt的过期时间，必须是可以解析为时间/时间戳的数字类型。服务器端在验证当前时间大于过期时间时，应当验证不予通过。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\",\n    \"aud\": \"com.llbetter.JsonWebToken\",\n    \"sub\": \"10000\", // user id\n    \"exp\": 1516239022\n}\n```\n\n## nbf(Not Before)\n\n表示jwt在这个时间后启用。同exp一样，需为可以解析成时间的\b数字类型。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\",\n    \"aud\": \"com.llbetter.JsonWebToken\",\n    \"sub\": \"10000\", // user id\n    \"exp\": 151239022,\n    \"nbf\": 151139022\n}\n```\n\n## iat(Issued At)\n\njwt的签发时间。同exp一样，需为可以解析成时间的\b数字类型。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\",\n    \"aud\": \"com.llbetter.JsonWebToken\",\n    \"sub\": \"10000\", // user id\n    \"exp\": 151239022,\n    \"nbf\": 151139022,\n    \"iat\": 151039022\n}\n```\n\n## jti(JWT ID)\n\n签发jwt时给予当前token的唯一ID，通常用于一次性消费的token。\n\ne.g.\n```javascript\n{\n    \"iss\": \"llbetter.com\",\n    \"aud\": \"com.llbetter.JsonWebToken\",\n    \"sub\": \"10000\", // user id\n    \"exp\": 151239022,\n    \"nbf\": 151139022,\n    \"iat\": 151039022,\n    \"jti\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n```","slug":"JWT-default-claims","published":1,"updated":"2020-10-19T06:53:10.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgg8680c0001exx405a7hx81","content":"<p>本文参考资料：</p>\n<p><a href=\"https://tools.ietf.org/html/rfc7519#section-4.1\">https://tools.ietf.org/html/rfc7519#section-4.1</a></p>\n<a id=\"more\"></a> \n\n<p>按照JWT协议的说法，默认的声明是可选的，目前是为了提供参考、增加payload效能，同时为各语言的实现提供参考。</p>\n<h2 id=\"iss-Issuer\"><a href=\"#iss-Issuer\" class=\"headerlink\" title=\"iss(Issuer)\"></a>iss(Issuer)</h2><p>jwt的颁发者，其值应为大小写敏感的字符串或Uri。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"aud-Audience\"><a href=\"#aud-Audience\" class=\"headerlink\" title=\"aud(Audience)\"></a>aud(Audience)</h2><p>jwt的适用对象，其值应为大小写敏感的字符串或Uri。一般可以为特定的App、服务或模块。</p>\n<p>比如我们颁发了一个jwt给一个叫”JsonWebToken”的app使用，sub可以是这个app的包签名或者标识。</p>\n<p>服务器端的安全策略在签发时和验证时，aud必须是一致的。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;aud&quot;</span>: <span class=\"string\">&quot;com.llbetter.JsonWebToken&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sub-Subject\"><a href=\"#sub-Subject\" class=\"headerlink\" title=\"sub(Subject)\"></a>sub(Subject)</h2><p>jwt\b的所有者，可以是用户ID、唯一标识。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;aud&quot;</span>: <span class=\"string\">&quot;com.llbetter.JsonWebToken&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sub&quot;</span>: <span class=\"string\">&quot;10000&quot;</span> <span class=\"comment\">// user id</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"exp-Expiration-Time\"><a href=\"#exp-Expiration-Time\" class=\"headerlink\" title=\"exp(Expiration Time)\"></a>exp(Expiration Time)</h2><p>jwt的过期时间，必须是可以解析为时间/时间戳的数字类型。服务器端在验证当前时间大于过期时间时，应当验证不予通过。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;aud&quot;</span>: <span class=\"string\">&quot;com.llbetter.JsonWebToken&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sub&quot;</span>: <span class=\"string\">&quot;10000&quot;</span>, <span class=\"comment\">// user id</span></span><br><span class=\"line\">    <span class=\"string\">&quot;exp&quot;</span>: <span class=\"number\">1516239022</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nbf-Not-Before\"><a href=\"#nbf-Not-Before\" class=\"headerlink\" title=\"nbf(Not Before)\"></a>nbf(Not Before)</h2><p>表示jwt在这个时间后启用。同exp一样，需为可以解析成时间的\b数字类型。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;aud&quot;</span>: <span class=\"string\">&quot;com.llbetter.JsonWebToken&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sub&quot;</span>: <span class=\"string\">&quot;10000&quot;</span>, <span class=\"comment\">// user id</span></span><br><span class=\"line\">    <span class=\"string\">&quot;exp&quot;</span>: <span class=\"number\">151239022</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;nbf&quot;</span>: <span class=\"number\">151139022</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"iat-Issued-At\"><a href=\"#iat-Issued-At\" class=\"headerlink\" title=\"iat(Issued At)\"></a>iat(Issued At)</h2><p>jwt的签发时间。同exp一样，需为可以解析成时间的\b数字类型。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;aud&quot;</span>: <span class=\"string\">&quot;com.llbetter.JsonWebToken&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sub&quot;</span>: <span class=\"string\">&quot;10000&quot;</span>, <span class=\"comment\">// user id</span></span><br><span class=\"line\">    <span class=\"string\">&quot;exp&quot;</span>: <span class=\"number\">151239022</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;nbf&quot;</span>: <span class=\"number\">151139022</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;iat&quot;</span>: <span class=\"number\">151039022</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jti-JWT-ID\"><a href=\"#jti-JWT-ID\" class=\"headerlink\" title=\"jti(JWT ID)\"></a>jti(JWT ID)</h2><p>签发jwt时给予当前token的唯一ID，通常用于一次性消费的token。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;aud&quot;</span>: <span class=\"string\">&quot;com.llbetter.JsonWebToken&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sub&quot;</span>: <span class=\"string\">&quot;10000&quot;</span>, <span class=\"comment\">// user id</span></span><br><span class=\"line\">    <span class=\"string\">&quot;exp&quot;</span>: <span class=\"number\">151239022</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;nbf&quot;</span>: <span class=\"number\">151139022</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;iat&quot;</span>: <span class=\"number\">151039022</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;jti&quot;</span>: <span class=\"string\">&quot;550e8400-e29b-41d4-a716-446655440000&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>本文参考资料：</p>\n<p><a href=\"https://tools.ietf.org/html/rfc7519#section-4.1\">https://tools.ietf.org/html/rfc7519#section-4.1</a></p>","more":"<p>按照JWT协议的说法，默认的声明是可选的，目前是为了提供参考、增加payload效能，同时为各语言的实现提供参考。</p>\n<h2 id=\"iss-Issuer\"><a href=\"#iss-Issuer\" class=\"headerlink\" title=\"iss(Issuer)\"></a>iss(Issuer)</h2><p>jwt的颁发者，其值应为大小写敏感的字符串或Uri。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"aud-Audience\"><a href=\"#aud-Audience\" class=\"headerlink\" title=\"aud(Audience)\"></a>aud(Audience)</h2><p>jwt的适用对象，其值应为大小写敏感的字符串或Uri。一般可以为特定的App、服务或模块。</p>\n<p>比如我们颁发了一个jwt给一个叫”JsonWebToken”的app使用，sub可以是这个app的包签名或者标识。</p>\n<p>服务器端的安全策略在签发时和验证时，aud必须是一致的。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;aud&quot;</span>: <span class=\"string\">&quot;com.llbetter.JsonWebToken&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sub-Subject\"><a href=\"#sub-Subject\" class=\"headerlink\" title=\"sub(Subject)\"></a>sub(Subject)</h2><p>jwt\b的所有者，可以是用户ID、唯一标识。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;aud&quot;</span>: <span class=\"string\">&quot;com.llbetter.JsonWebToken&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sub&quot;</span>: <span class=\"string\">&quot;10000&quot;</span> <span class=\"comment\">// user id</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"exp-Expiration-Time\"><a href=\"#exp-Expiration-Time\" class=\"headerlink\" title=\"exp(Expiration Time)\"></a>exp(Expiration Time)</h2><p>jwt的过期时间，必须是可以解析为时间/时间戳的数字类型。服务器端在验证当前时间大于过期时间时，应当验证不予通过。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;aud&quot;</span>: <span class=\"string\">&quot;com.llbetter.JsonWebToken&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sub&quot;</span>: <span class=\"string\">&quot;10000&quot;</span>, <span class=\"comment\">// user id</span></span><br><span class=\"line\">    <span class=\"string\">&quot;exp&quot;</span>: <span class=\"number\">1516239022</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nbf-Not-Before\"><a href=\"#nbf-Not-Before\" class=\"headerlink\" title=\"nbf(Not Before)\"></a>nbf(Not Before)</h2><p>表示jwt在这个时间后启用。同exp一样，需为可以解析成时间的\b数字类型。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;aud&quot;</span>: <span class=\"string\">&quot;com.llbetter.JsonWebToken&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sub&quot;</span>: <span class=\"string\">&quot;10000&quot;</span>, <span class=\"comment\">// user id</span></span><br><span class=\"line\">    <span class=\"string\">&quot;exp&quot;</span>: <span class=\"number\">151239022</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;nbf&quot;</span>: <span class=\"number\">151139022</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"iat-Issued-At\"><a href=\"#iat-Issued-At\" class=\"headerlink\" title=\"iat(Issued At)\"></a>iat(Issued At)</h2><p>jwt的签发时间。同exp一样，需为可以解析成时间的\b数字类型。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;aud&quot;</span>: <span class=\"string\">&quot;com.llbetter.JsonWebToken&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sub&quot;</span>: <span class=\"string\">&quot;10000&quot;</span>, <span class=\"comment\">// user id</span></span><br><span class=\"line\">    <span class=\"string\">&quot;exp&quot;</span>: <span class=\"number\">151239022</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;nbf&quot;</span>: <span class=\"number\">151139022</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;iat&quot;</span>: <span class=\"number\">151039022</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jti-JWT-ID\"><a href=\"#jti-JWT-ID\" class=\"headerlink\" title=\"jti(JWT ID)\"></a>jti(JWT ID)</h2><p>签发jwt时给予当前token的唯一ID，通常用于一次性消费的token。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;iss&quot;</span>: <span class=\"string\">&quot;llbetter.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;aud&quot;</span>: <span class=\"string\">&quot;com.llbetter.JsonWebToken&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sub&quot;</span>: <span class=\"string\">&quot;10000&quot;</span>, <span class=\"comment\">// user id</span></span><br><span class=\"line\">    <span class=\"string\">&quot;exp&quot;</span>: <span class=\"number\">151239022</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;nbf&quot;</span>: <span class=\"number\">151139022</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;iat&quot;</span>: <span class=\"number\">151039022</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;jti&quot;</span>: <span class=\"string\">&quot;550e8400-e29b-41d4-a716-446655440000&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"iTerm2 + Oh My Zsh 打造舒适终端体验","date":"2018-05-22T08:51:27.000Z","_content":"\n### 写在前面\n\n最终效果图：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/14.png)\n\n<!-- more --> \n\n本文严重抄袭自：https://www.jianshu.com/p/7de00c73a2bb\n\n因排版和原文中的一些bug，参照搜索引擎和原文有了本篇文章。\n\n因为powerline以及homebrew均需要安装command line tool，网络条件优越的同学在执行本文下面内容之前，可以先安装XCode并打开运行一次（会初始化安装components），省去以后在iterm2中的等待时间。\n\n另外，git也是必要的，各位可以自行下载安装，除了网络没有任何坑：\n\nhttps://git-scm.com\n\n介于此，本文默认各位同学已经安装了git环境和xcode（command line tools），遇到提示找不到git命令或需要安装command line tool的地方，文中不再赘述了。\n\n\n### 下载iTerm2\n\n可以直接去官网下载：https://www.iterm2.com/\n\n安装完成后，在/bin目录下会多出一个zsh的文件。\n\nMac系统默认使用dash作为终端，可以使用命令修改默认使用zsh：\n\n```bash\nchsh -s /bin/zsh\n```\n\n如果想修改回默认dash，同样使用chsh命令即可：\n\n```bash\nchsh -s /bin/bash\n```\n\nOK，这就是iTerm2初始的样子，下面我们来美化它，让它变得更好用！\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/1.png)\n\n### 安装Oh my zsh\n\n安装方法有两种，可以使用curl或wget，看自己环境或喜好：\n\n```bash\n# curl 安装方式\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n```bash\n# wget 安装方式\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n\n安装命令和安装完成后的截图：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/2.png)\n\noh-my-zsh开源地址：https://github.com/robbyrussell/oh-my-zsh\n\n### 安装PowerLine\n\npowerline官网：http://powerline.readthedocs.io/en/latest/installation.html\n\n安装powerline的方式依然简单，也只需要一条命令：\n\n```bash\npip install powerline-status --user\n```\n\n没有安装pip的同学可能会碰到zsh: command not found: pip。\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/3.png)\n\n使用命令安装pip即可：\n\n```bash\nsudo easy_install pip\n```\n\n安装后再次执行安装powerline的命令即可。\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/4.png)\n\n### 安装PowerFonts\n\n安装字体库需要首先将项目git clone至本地，然后执行源码中的install.sh。\n\n在你习惯的位置新建一个文件夹，如：~/Desktop/OpenSource/\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/5.png)\n\n在此文件夹下执行git clone命令：\n\n```bash\n# git clone\ngit clone https://github.com/powerline/fonts.git --depth=1\n# cd to folder\ncd fonts\n# run install shell\n./install.sh\n```\n\n执行结果如下：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/6.png)\n\n安装好字体库之后，我们来设置iTerm2的字体，具体的操作是iTerm2 -> Preferences -> Profiles -> Text，在Font区域选中Change Font，然后找到Meslo LG字体。有L、M、S可选，看个人喜好：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/7.png)\n\n### 安装配色方案\n\n配色方案在使用VIM或Colorful Log时会变得非常有用，同时界面也不会一片黑绿一样死板。\n\n同样使用git clone的方式下载源码进行安装：\n\n```bash\ncd ~/Desktop/OpenSource\ngit clone https://github.com/altercation/solarized\ncd solarized/iterm2-colors-solarized/\nopen .\n```\n\n在打开的finder窗口中，双击Solarized Dark.itermcolors和Solarized Light.itermcolors即可安装明暗两种配色：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/8.png)\n\n再次进入iTerm2 -> Preferences -> Profiles -> Colors -> Color Presets中根据个人喜好选择这两种配色中的一种即可：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/9.png)\n\n### 安装主题\n\n下载agnoster主题，执行脚本安装：\n\n```bash\ncd ~/Desktop/OpenSource\ngit clone https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git\ncd oh-my-zsh-agnoster-fcamblor/\n./install\n```\n\n执行上面的命令会将主题拷贝到oh my zsh的themes中：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/10.png)\n\n拷贝完成后，执行命令打开zshrc配置文件，将ZSH_THEME后面的字段改为agnoster。\n\n```bash\nvi ~/.zshrc\n```\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/11.png)\n\n修改完成后按一下esc调出vi命令，输入:wq保存并退出vi模式。\n\n此时command+Q或source配置文件后，iTerm2变了模样：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/12.png)\n\n### 安装高亮插件\n\n这是oh my zsh的一个插件，安装方式与theme大同小异：\n\n```bash\ncd ~/.oh-my-zsh/custom/plugins/\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git\nvi ~/.zshrc\n```\n\n这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/13.png)\n\n请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个。\n\n然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n\n按一下esc调出vi命令，输入:wq保存并退出vi模式。\n\n执行命令使刚才的修改生效：\n\n```bash\nsource ~/.zshrc\n```\n\n至此大功告成，请看最终效果图：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/14.png)\n\n背景图片取自微软Surface Studio的4K壁纸(将近12MB大小)，非常漂亮，需要的可以自取：\n\nhttps://pan.baidu.com/s/18jNrULbr05npD0Z_ht28Kg\n\n更换背景图片方式：iTerm2 -> Preferences -> Profiles -> Window -> BackGround Image勾选图片即可。\n\n#### 可选择、命令补全\n\n跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做zsh-autosuggestion，用于命令建议和补全。\n\n```bash\ncd ~/.oh-my-zsh/custom/plugins/\ngit clone https://github.com/zsh-users/zsh-autosuggestions\nvi ~/.zshrc\n```\n\n找到plugins，加上这个插件即可：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/15.png)\n\n插件效果：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/16.png)","source":"_posts/iterm2-with-oh-my-zsh.md","raw":"---\ntitle: iTerm2 + Oh My Zsh 打造舒适终端体验\ndate: 2018-05-22 16:51:27\ntags: [bash,iterm2,zsh,shell]\ncategories: [个人]\n---\n\n### 写在前面\n\n最终效果图：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/14.png)\n\n<!-- more --> \n\n本文严重抄袭自：https://www.jianshu.com/p/7de00c73a2bb\n\n因排版和原文中的一些bug，参照搜索引擎和原文有了本篇文章。\n\n因为powerline以及homebrew均需要安装command line tool，网络条件优越的同学在执行本文下面内容之前，可以先安装XCode并打开运行一次（会初始化安装components），省去以后在iterm2中的等待时间。\n\n另外，git也是必要的，各位可以自行下载安装，除了网络没有任何坑：\n\nhttps://git-scm.com\n\n介于此，本文默认各位同学已经安装了git环境和xcode（command line tools），遇到提示找不到git命令或需要安装command line tool的地方，文中不再赘述了。\n\n\n### 下载iTerm2\n\n可以直接去官网下载：https://www.iterm2.com/\n\n安装完成后，在/bin目录下会多出一个zsh的文件。\n\nMac系统默认使用dash作为终端，可以使用命令修改默认使用zsh：\n\n```bash\nchsh -s /bin/zsh\n```\n\n如果想修改回默认dash，同样使用chsh命令即可：\n\n```bash\nchsh -s /bin/bash\n```\n\nOK，这就是iTerm2初始的样子，下面我们来美化它，让它变得更好用！\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/1.png)\n\n### 安装Oh my zsh\n\n安装方法有两种，可以使用curl或wget，看自己环境或喜好：\n\n```bash\n# curl 安装方式\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n```bash\n# wget 安装方式\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n\n安装命令和安装完成后的截图：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/2.png)\n\noh-my-zsh开源地址：https://github.com/robbyrussell/oh-my-zsh\n\n### 安装PowerLine\n\npowerline官网：http://powerline.readthedocs.io/en/latest/installation.html\n\n安装powerline的方式依然简单，也只需要一条命令：\n\n```bash\npip install powerline-status --user\n```\n\n没有安装pip的同学可能会碰到zsh: command not found: pip。\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/3.png)\n\n使用命令安装pip即可：\n\n```bash\nsudo easy_install pip\n```\n\n安装后再次执行安装powerline的命令即可。\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/4.png)\n\n### 安装PowerFonts\n\n安装字体库需要首先将项目git clone至本地，然后执行源码中的install.sh。\n\n在你习惯的位置新建一个文件夹，如：~/Desktop/OpenSource/\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/5.png)\n\n在此文件夹下执行git clone命令：\n\n```bash\n# git clone\ngit clone https://github.com/powerline/fonts.git --depth=1\n# cd to folder\ncd fonts\n# run install shell\n./install.sh\n```\n\n执行结果如下：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/6.png)\n\n安装好字体库之后，我们来设置iTerm2的字体，具体的操作是iTerm2 -> Preferences -> Profiles -> Text，在Font区域选中Change Font，然后找到Meslo LG字体。有L、M、S可选，看个人喜好：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/7.png)\n\n### 安装配色方案\n\n配色方案在使用VIM或Colorful Log时会变得非常有用，同时界面也不会一片黑绿一样死板。\n\n同样使用git clone的方式下载源码进行安装：\n\n```bash\ncd ~/Desktop/OpenSource\ngit clone https://github.com/altercation/solarized\ncd solarized/iterm2-colors-solarized/\nopen .\n```\n\n在打开的finder窗口中，双击Solarized Dark.itermcolors和Solarized Light.itermcolors即可安装明暗两种配色：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/8.png)\n\n再次进入iTerm2 -> Preferences -> Profiles -> Colors -> Color Presets中根据个人喜好选择这两种配色中的一种即可：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/9.png)\n\n### 安装主题\n\n下载agnoster主题，执行脚本安装：\n\n```bash\ncd ~/Desktop/OpenSource\ngit clone https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git\ncd oh-my-zsh-agnoster-fcamblor/\n./install\n```\n\n执行上面的命令会将主题拷贝到oh my zsh的themes中：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/10.png)\n\n拷贝完成后，执行命令打开zshrc配置文件，将ZSH_THEME后面的字段改为agnoster。\n\n```bash\nvi ~/.zshrc\n```\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/11.png)\n\n修改完成后按一下esc调出vi命令，输入:wq保存并退出vi模式。\n\n此时command+Q或source配置文件后，iTerm2变了模样：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/12.png)\n\n### 安装高亮插件\n\n这是oh my zsh的一个插件，安装方式与theme大同小异：\n\n```bash\ncd ~/.oh-my-zsh/custom/plugins/\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git\nvi ~/.zshrc\n```\n\n这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/13.png)\n\n请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个。\n\n然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n\n按一下esc调出vi命令，输入:wq保存并退出vi模式。\n\n执行命令使刚才的修改生效：\n\n```bash\nsource ~/.zshrc\n```\n\n至此大功告成，请看最终效果图：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/14.png)\n\n背景图片取自微软Surface Studio的4K壁纸(将近12MB大小)，非常漂亮，需要的可以自取：\n\nhttps://pan.baidu.com/s/18jNrULbr05npD0Z_ht28Kg\n\n更换背景图片方式：iTerm2 -> Preferences -> Profiles -> Window -> BackGround Image勾选图片即可。\n\n#### 可选择、命令补全\n\n跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做zsh-autosuggestion，用于命令建议和补全。\n\n```bash\ncd ~/.oh-my-zsh/custom/plugins/\ngit clone https://github.com/zsh-users/zsh-autosuggestions\nvi ~/.zshrc\n```\n\n找到plugins，加上这个插件即可：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/15.png)\n\n插件效果：\n\n![ImageInitIterm](https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/16.png)","slug":"iterm2-with-oh-my-zsh","published":1,"updated":"2020-10-19T06:53:10.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgg8680t0009exx4gf006179","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>最终效果图：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/14.png\" alt=\"ImageInitIterm\"></p>\n<a id=\"more\"></a> \n\n<p>本文严重抄袭自：<a href=\"https://www.jianshu.com/p/7de00c73a2bb\">https://www.jianshu.com/p/7de00c73a2bb</a></p>\n<p>因排版和原文中的一些bug，参照搜索引擎和原文有了本篇文章。</p>\n<p>因为powerline以及homebrew均需要安装command line tool，网络条件优越的同学在执行本文下面内容之前，可以先安装XCode并打开运行一次（会初始化安装components），省去以后在iterm2中的等待时间。</p>\n<p>另外，git也是必要的，各位可以自行下载安装，除了网络没有任何坑：</p>\n<p><a href=\"https://git-scm.com/\">https://git-scm.com</a></p>\n<p>介于此，本文默认各位同学已经安装了git环境和xcode（command line tools），遇到提示找不到git命令或需要安装command line tool的地方，文中不再赘述了。</p>\n<h3 id=\"下载iTerm2\"><a href=\"#下载iTerm2\" class=\"headerlink\" title=\"下载iTerm2\"></a>下载iTerm2</h3><p>可以直接去官网下载：<a href=\"https://www.iterm2.com/\">https://www.iterm2.com/</a></p>\n<p>安装完成后，在/bin目录下会多出一个zsh的文件。</p>\n<p>Mac系统默认使用dash作为终端，可以使用命令修改默认使用zsh：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n\n<p>如果想修改回默认dash，同样使用chsh命令即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>OK，这就是iTerm2初始的样子，下面我们来美化它，让它变得更好用！</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/1.png\" alt=\"ImageInitIterm\"></p>\n<h3 id=\"安装Oh-my-zsh\"><a href=\"#安装Oh-my-zsh\" class=\"headerlink\" title=\"安装Oh my zsh\"></a>安装Oh my zsh</h3><p>安装方法有两种，可以使用curl或wget，看自己环境或喜好：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># curl 安装方式</span></span><br><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># wget 安装方式</span></span><br><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>安装命令和安装完成后的截图：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/2.png\" alt=\"ImageInitIterm\"></p>\n<p>oh-my-zsh开源地址：<a href=\"https://github.com/robbyrussell/oh-my-zsh\">https://github.com/robbyrussell/oh-my-zsh</a></p>\n<h3 id=\"安装PowerLine\"><a href=\"#安装PowerLine\" class=\"headerlink\" title=\"安装PowerLine\"></a>安装PowerLine</h3><p>powerline官网：<a href=\"http://powerline.readthedocs.io/en/latest/installation.html\">http://powerline.readthedocs.io/en/latest/installation.html</a></p>\n<p>安装powerline的方式依然简单，也只需要一条命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install powerline-status --user</span><br></pre></td></tr></table></figure>\n\n<p>没有安装pip的同学可能会碰到zsh: command not found: pip。</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/3.png\" alt=\"ImageInitIterm\"></p>\n<p>使用命令安装pip即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo easy_install pip</span><br></pre></td></tr></table></figure>\n\n<p>安装后再次执行安装powerline的命令即可。</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/4.png\" alt=\"ImageInitIterm\"></p>\n<h3 id=\"安装PowerFonts\"><a href=\"#安装PowerFonts\" class=\"headerlink\" title=\"安装PowerFonts\"></a>安装PowerFonts</h3><p>安装字体库需要首先将项目git clone至本地，然后执行源码中的install.sh。</p>\n<p>在你习惯的位置新建一个文件夹，如：~/Desktop/OpenSource/</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/5.png\" alt=\"ImageInitIterm\"></p>\n<p>在此文件夹下执行git clone命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git clone</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class=\"line\"><span class=\"comment\"># cd to folder</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> fonts</span><br><span class=\"line\"><span class=\"comment\"># run install shell</span></span><br><span class=\"line\">./install.sh</span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/6.png\" alt=\"ImageInitIterm\"></p>\n<p>安装好字体库之后，我们来设置iTerm2的字体，具体的操作是iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text，在Font区域选中Change Font，然后找到Meslo LG字体。有L、M、S可选，看个人喜好：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/7.png\" alt=\"ImageInitIterm\"></p>\n<h3 id=\"安装配色方案\"><a href=\"#安装配色方案\" class=\"headerlink\" title=\"安装配色方案\"></a>安装配色方案</h3><p>配色方案在使用VIM或Colorful Log时会变得非常有用，同时界面也不会一片黑绿一样死板。</p>\n<p>同样使用git clone的方式下载源码进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/Desktop/OpenSource</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/altercation/solarized</span><br><span class=\"line\"><span class=\"built_in\">cd</span> solarized/iterm2-colors-solarized/</span><br><span class=\"line\">open .</span><br></pre></td></tr></table></figure>\n\n<p>在打开的finder窗口中，双击Solarized Dark.itermcolors和Solarized Light.itermcolors即可安装明暗两种配色：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/8.png\" alt=\"ImageInitIterm\"></p>\n<p>再次进入iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Colors -&gt; Color Presets中根据个人喜好选择这两种配色中的一种即可：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/9.png\" alt=\"ImageInitIterm\"></p>\n<h3 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h3><p>下载agnoster主题，执行脚本安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/Desktop/OpenSource</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> oh-my-zsh-agnoster-fcamblor/</span><br><span class=\"line\">./install</span><br></pre></td></tr></table></figure>\n\n<p>执行上面的命令会将主题拷贝到oh my zsh的themes中：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/10.png\" alt=\"ImageInitIterm\"></p>\n<p>拷贝完成后，执行命令打开zshrc配置文件，将ZSH_THEME后面的字段改为agnoster。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/11.png\" alt=\"ImageInitIterm\"></p>\n<p>修改完成后按一下esc调出vi命令，输入:wq保存并退出vi模式。</p>\n<p>此时command+Q或source配置文件后，iTerm2变了模样：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/12.png\" alt=\"ImageInitIterm\"></p>\n<h3 id=\"安装高亮插件\"><a href=\"#安装高亮插件\" class=\"headerlink\" title=\"安装高亮插件\"></a>安装高亮插件</h3><p>这是oh my zsh的一个插件，安装方式与theme大同小异：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/custom/plugins/</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class=\"line\">vi ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/13.png\" alt=\"ImageInitIterm\"></p>\n<p>请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个。</p>\n<p>然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</p>\n<p>按一下esc调出vi命令，输入:wq保存并退出vi模式。</p>\n<p>执行命令使刚才的修改生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>至此大功告成，请看最终效果图：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/14.png\" alt=\"ImageInitIterm\"></p>\n<p>背景图片取自微软Surface Studio的4K壁纸(将近12MB大小)，非常漂亮，需要的可以自取：</p>\n<p><a href=\"https://pan.baidu.com/s/18jNrULbr05npD0Z_ht28Kg\">https://pan.baidu.com/s/18jNrULbr05npD0Z_ht28Kg</a></p>\n<p>更换背景图片方式：iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Window -&gt; BackGround Image勾选图片即可。</p>\n<h4 id=\"可选择、命令补全\"><a href=\"#可选择、命令补全\" class=\"headerlink\" title=\"可选择、命令补全\"></a>可选择、命令补全</h4><p>跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做zsh-autosuggestion，用于命令建议和补全。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/custom/plugins/</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-autosuggestions</span><br><span class=\"line\">vi ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>找到plugins，加上这个插件即可：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/15.png\" alt=\"ImageInitIterm\"></p>\n<p>插件效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/16.png\" alt=\"ImageInitIterm\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>最终效果图：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/14.png\" alt=\"ImageInitIterm\"></p>","more":"<p>本文严重抄袭自：<a href=\"https://www.jianshu.com/p/7de00c73a2bb\">https://www.jianshu.com/p/7de00c73a2bb</a></p>\n<p>因排版和原文中的一些bug，参照搜索引擎和原文有了本篇文章。</p>\n<p>因为powerline以及homebrew均需要安装command line tool，网络条件优越的同学在执行本文下面内容之前，可以先安装XCode并打开运行一次（会初始化安装components），省去以后在iterm2中的等待时间。</p>\n<p>另外，git也是必要的，各位可以自行下载安装，除了网络没有任何坑：</p>\n<p><a href=\"https://git-scm.com/\">https://git-scm.com</a></p>\n<p>介于此，本文默认各位同学已经安装了git环境和xcode（command line tools），遇到提示找不到git命令或需要安装command line tool的地方，文中不再赘述了。</p>\n<h3 id=\"下载iTerm2\"><a href=\"#下载iTerm2\" class=\"headerlink\" title=\"下载iTerm2\"></a>下载iTerm2</h3><p>可以直接去官网下载：<a href=\"https://www.iterm2.com/\">https://www.iterm2.com/</a></p>\n<p>安装完成后，在/bin目录下会多出一个zsh的文件。</p>\n<p>Mac系统默认使用dash作为终端，可以使用命令修改默认使用zsh：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n\n<p>如果想修改回默认dash，同样使用chsh命令即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>OK，这就是iTerm2初始的样子，下面我们来美化它，让它变得更好用！</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/1.png\" alt=\"ImageInitIterm\"></p>\n<h3 id=\"安装Oh-my-zsh\"><a href=\"#安装Oh-my-zsh\" class=\"headerlink\" title=\"安装Oh my zsh\"></a>安装Oh my zsh</h3><p>安装方法有两种，可以使用curl或wget，看自己环境或喜好：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># curl 安装方式</span></span><br><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># wget 安装方式</span></span><br><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>安装命令和安装完成后的截图：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/2.png\" alt=\"ImageInitIterm\"></p>\n<p>oh-my-zsh开源地址：<a href=\"https://github.com/robbyrussell/oh-my-zsh\">https://github.com/robbyrussell/oh-my-zsh</a></p>\n<h3 id=\"安装PowerLine\"><a href=\"#安装PowerLine\" class=\"headerlink\" title=\"安装PowerLine\"></a>安装PowerLine</h3><p>powerline官网：<a href=\"http://powerline.readthedocs.io/en/latest/installation.html\">http://powerline.readthedocs.io/en/latest/installation.html</a></p>\n<p>安装powerline的方式依然简单，也只需要一条命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install powerline-status --user</span><br></pre></td></tr></table></figure>\n\n<p>没有安装pip的同学可能会碰到zsh: command not found: pip。</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/3.png\" alt=\"ImageInitIterm\"></p>\n<p>使用命令安装pip即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo easy_install pip</span><br></pre></td></tr></table></figure>\n\n<p>安装后再次执行安装powerline的命令即可。</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/4.png\" alt=\"ImageInitIterm\"></p>\n<h3 id=\"安装PowerFonts\"><a href=\"#安装PowerFonts\" class=\"headerlink\" title=\"安装PowerFonts\"></a>安装PowerFonts</h3><p>安装字体库需要首先将项目git clone至本地，然后执行源码中的install.sh。</p>\n<p>在你习惯的位置新建一个文件夹，如：~/Desktop/OpenSource/</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/5.png\" alt=\"ImageInitIterm\"></p>\n<p>在此文件夹下执行git clone命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git clone</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class=\"line\"><span class=\"comment\"># cd to folder</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> fonts</span><br><span class=\"line\"><span class=\"comment\"># run install shell</span></span><br><span class=\"line\">./install.sh</span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/6.png\" alt=\"ImageInitIterm\"></p>\n<p>安装好字体库之后，我们来设置iTerm2的字体，具体的操作是iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text，在Font区域选中Change Font，然后找到Meslo LG字体。有L、M、S可选，看个人喜好：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/7.png\" alt=\"ImageInitIterm\"></p>\n<h3 id=\"安装配色方案\"><a href=\"#安装配色方案\" class=\"headerlink\" title=\"安装配色方案\"></a>安装配色方案</h3><p>配色方案在使用VIM或Colorful Log时会变得非常有用，同时界面也不会一片黑绿一样死板。</p>\n<p>同样使用git clone的方式下载源码进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/Desktop/OpenSource</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/altercation/solarized</span><br><span class=\"line\"><span class=\"built_in\">cd</span> solarized/iterm2-colors-solarized/</span><br><span class=\"line\">open .</span><br></pre></td></tr></table></figure>\n\n<p>在打开的finder窗口中，双击Solarized Dark.itermcolors和Solarized Light.itermcolors即可安装明暗两种配色：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/8.png\" alt=\"ImageInitIterm\"></p>\n<p>再次进入iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Colors -&gt; Color Presets中根据个人喜好选择这两种配色中的一种即可：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/9.png\" alt=\"ImageInitIterm\"></p>\n<h3 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h3><p>下载agnoster主题，执行脚本安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/Desktop/OpenSource</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> oh-my-zsh-agnoster-fcamblor/</span><br><span class=\"line\">./install</span><br></pre></td></tr></table></figure>\n\n<p>执行上面的命令会将主题拷贝到oh my zsh的themes中：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/10.png\" alt=\"ImageInitIterm\"></p>\n<p>拷贝完成后，执行命令打开zshrc配置文件，将ZSH_THEME后面的字段改为agnoster。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/11.png\" alt=\"ImageInitIterm\"></p>\n<p>修改完成后按一下esc调出vi命令，输入:wq保存并退出vi模式。</p>\n<p>此时command+Q或source配置文件后，iTerm2变了模样：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/12.png\" alt=\"ImageInitIterm\"></p>\n<h3 id=\"安装高亮插件\"><a href=\"#安装高亮插件\" class=\"headerlink\" title=\"安装高亮插件\"></a>安装高亮插件</h3><p>这是oh my zsh的一个插件，安装方式与theme大同小异：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/custom/plugins/</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class=\"line\">vi ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/13.png\" alt=\"ImageInitIterm\"></p>\n<p>请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个。</p>\n<p>然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</p>\n<p>按一下esc调出vi命令，输入:wq保存并退出vi模式。</p>\n<p>执行命令使刚才的修改生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>至此大功告成，请看最终效果图：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/14.png\" alt=\"ImageInitIterm\"></p>\n<p>背景图片取自微软Surface Studio的4K壁纸(将近12MB大小)，非常漂亮，需要的可以自取：</p>\n<p><a href=\"https://pan.baidu.com/s/18jNrULbr05npD0Z_ht28Kg\">https://pan.baidu.com/s/18jNrULbr05npD0Z_ht28Kg</a></p>\n<p>更换背景图片方式：iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Window -&gt; BackGround Image勾选图片即可。</p>\n<h4 id=\"可选择、命令补全\"><a href=\"#可选择、命令补全\" class=\"headerlink\" title=\"可选择、命令补全\"></a>可选择、命令补全</h4><p>跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做zsh-autosuggestion，用于命令建议和补全。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/custom/plugins/</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-autosuggestions</span><br><span class=\"line\">vi ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>找到plugins，加上这个插件即可：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/15.png\" alt=\"ImageInitIterm\"></p>\n<p>插件效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/pubimgs/master/blogs/iterm2/16.png\" alt=\"ImageInitIterm\"></p>"},{"title":"基于Docker的 DevOps CI/CD实践","date":"2018-02-01T08:44:05.000Z","_content":"\n本文默认已经安装好了Rancher，如果没有安装：\n```bash\nsudo docker run -d --restart=unless-stopped -p 8080:8080 rancher/server\n```\n\n## 零、前言\n\n相信我，一切事情的发生都是赶鸭子上架，没有例外。人类所有伟大的变革都是迫不得已，可又是那么顺其自然。比如容器（docker）技术的诞生，比如箭在弦上的创业，比如野心勃勃的kubernetes，比如如今已作为左膀右臂的rancher，比如这篇文章。\n\n不同于阿里云的CI/CD实践（[如何利用Docker构建基于DevOps的全自动CI][Zheng]），我们结合自身状况，构建了一套我们自己的DevOps CI/CD流程，更轻更小，更适合Startup。\n\n<!-- more --> \n\n\n## 一、合适的才是最好的（Node.js & Docker）\n\n如果世界只有FLAG、BAT，那就太无趣了。iHealth是一家初创型公司，我所在的部门有大概10名研发人员，在担负着三端研发工作的同时，所有围绕服务的交付和运维工作也都是我们来做。\n\n技术的选型上，服务端、Web端和移动端（Android、iOS）都要上，但人少。所以招人的时候并没有以貌取人的资格，部门对外的Title都是全栈。能一门语言通吃三端，群众基础广泛，恐怕没有比Javascript/Typescript(Node.js)更合适的了。\n\n服务端有Express、Koa、Feather、Nest、Meteor等各有其长的框架，前端大而火的Reactjs、Vuejs和Angular，不管是Server Render还是前后端分离，都可以得心应手。因为公司的健康设备（血糖仪、血压计、体温计、血氧、体脂秤等等）会有专门的部门研发设计以及提供SDK，所以移动端的研发工作更多是在设计实现和性能优化上，React Native是一枚大杀器。虽然现在公司并没有桌面端的需求，但不能否认的是Electron是一个很有趣的项目，也为“全栈”这个词增加了更多背书。\n\n![ImageJsStack](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/js-fullstack.png)\n\n另外，选择使用Node/Js/Ts作为全栈的基础会附带有RPC的好处。无需集成传统意义上的RPC框架（如gRPC），只需在编写远程(微)服务方法时，编写相应的npm package，也可以达到相同的目的，且成本更小，更易理解。\n\n运维环境的选型上，所有的业务都运行在云端，省去了机房维护和服务器运维的成本。其实在盘古开荒时，我们也是编写了Node程序后，使用PM2部署在服务器上，并没有使用Docker。当然也存在没有使用Docker所带来的一切问题：三端不同步、环境无法隔离……而Docker带给我最大的惊喜除了超强的可移植性，更在于研发人员可以非常容易对程序的顶级架构进行推理。\n\n事实上，我们直接使用docker-compose做容器编排着实有一段时间，在一次大规模的服务器迁移中，发现需要重新思考越来越多的container管理和更完善的编排方案。Rancher（Cattle）就是在这时被应用到技术栈中。\n\n\n## 二、一切从Github开始\n\n在运维环境一波三折的同时，DevOps的征程也是亦步亦趋，步步惊心。幸运的是，我们知道自己缺乏什么，想要什么，所以能比较容易的做到“哪里不会点哪里”。如同上一章节所述，合适的才是最好的。持续集成（CI）与持续交付（CD）的迭代过程，从最初的代码拷贝，到结合docker-compose与rsync命令，到使用CI/CD工具，做到相对意义上的自动化……迄今为止，我们摸索出一套相对好用并且好玩的流程。\n\n![ImageDevOps](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/devops-srctions.png)\n\n故事大致是这样的，当一只代码猴提交代码之后，他需要去接一杯咖啡。在猫屎氤氲的雾气里45°角仰望天花板，手机微信提醒这次构建成功（或失败，并附带污言秽语）。这时他可以开始往工位走，坐下时，微信又会提醒本次部署到Rancher成功（或失败）。\n\n这一切开始的地方是github。当开发者写完 ~~BUG~~ 功能之后，需要有地方保存这些宝贵的资料。之所以没有使用Gitlab或Bitbucket搭建私有的Git服务器，是因为我们认为代码是最直接的价值体现。服务如骨架，终端如皮肤，UE如衣服，三者组成让人赏心悦目的风景，代码是这背后的基础。我们认为在团队精力无法更分散、人口规模尚小时，购买Github的商业版是稳妥且必要的，毕竟那帮人修复一次故障就像把网线拔下来再插上那样简单。\n\n\n## 三、Drone CI\n\nDrone这个单词在翻译中译作雄蜂、无人机。我特意咨询了一位精通一千零二十四国语言的英国朋友，说这个词的意思是autonomous，works by itself。白话就是有活它自己干，而且是自主的。不过这个解释对于Drone来说名副其实。这个在[Github][DroneGithub]上拥有13,000+ Stars的开源项目，使用Golang编写，相比Jenkins的大而全，Drone是为Docker而生的CI软件。如果有使用过Gitlab CI的小伙伴，相信对Drone的使用方式不会感到陌生，他们都是使用Yaml风格文件来定义pipeline：\n\n```yaml\npipeline:\n  build:\n    image: node:latest\n    commands:\n      - npm install\n      - npm run lint\n      - npm run test\n  publish:\n    image: plugins/npm\n    when:\n      branch: master\n```\n\n\nDrone的安装方式如同Rancher一样简单，一行docker命令即可。当然，大家也可以看[Drone的官方文档][DroneDoc]，在这里，只讲一下使用Rancher catalog安装Drone的方式：\n\n![ImageDroneInstall](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-install.png)\n\n查看大图大家可以看到Drone使用Rancher catalog安装的方法（with github），在Github 的Settings中创建Drone的OAuth App时，Home Page Url务必要写你能访问Drone的IP地址或域名，例如：\n> http://drone.company.com\n\n而OAuth App的Authorization callback URL应该对应上面的写法：\n> http://drone.company.com/authorize\n\n小功告成：\n\n![ImageDroneInstalled](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone_installed.png)\n\n\n登录进Drone之后，在Repositories中找到你想要开启CI的Git Repo，用switch按钮打开它：\n\n![ImageDroneSwitched](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-switch-repo.png)\n\n这表示已经打开了Drone对于这个Repo的webhook，当有代码提交时，Drone会检测这个Repo的根目录中是否包含.drone.yml文件，如果存在，则根据yaml文件定义的pipeline执行CI流程。\n\n## 四、Drone与rancher、harbor、企业微信的集成\n\n在决定使用Drone之前，需要知道的是，Drone是一个高度依赖社区的项目。其文档诸多不完善（完善过，版本迭代，文档跟不上了），plugins质量良莠。但对于擅长Github issue、Google、Stackoverflow的朋友来说，这并不是特别困难的事情。Drone也有付费版本，无需自己提供服务器，而是像Github那样作为服务使用。\n\n如果你决定开始使用Drone，截止到上面的步骤，我们打开了Drone对于Github Repo的监听，再次提醒，需要在代码repo的根目录包含.drone.yml文件，才会真正触发Drone的pipeline。\n\n那么，如果想重现上面故事中的场景，应该如何进行集成呢？\n\n我司在构建CI/CD的过程中，现使用Harbor作为私有镜像仓库，从提交代码到自动部署到Rancher，其实应当经历如下步骤：\n\n- 提交代码，触发Github Webhook\n- Drone使用docker插件，根据Dockerfile构建镜像，并推送到Harbor中\n- Drone使用rancher插件，根据stack/service，部署上面构建好的image\n- Drone使用企业微信插件，报告部署结果\n\n在这里节选公司项目中的一段yaml代码，描述了上述步骤：\n```yaml\n# .drone.yaml\n\npipeline:\n  # 使用plugins/docker插件，构建镜像，推送到harbor\n  build_step:\n    image: plugins/docker\n    username: harbor_username\n    password: harbor_password\n    registry: harbor.company.com\n    repo: harbor.company.com/registry/test\n    mirror: 'https://registry.docker-cn.com'\n    tag:\n      - dev\n    dockerfile: Dockerfile\n    when:\n      branch: develop\n      event: push\n  \n  # 使用rancher插件，自动更新实例\n  rancher:\n    image: peloton/drone-rancher\n    url: 'http://rancher.company.com/v2-beta/projects/1a870'\n    access_key: rancher access key\n    secret_key: rancher secret key\n    service: rancher_stack/rancher_service\n    docker_image: 'harbor.company.com/registry/test:dev'\n    batch_size: 1\n    timeout: 600\n    confirm: true\n    when:\n      branch: develop\n      event: push\n      \n  # 使用clem109/drone-wechat插件，报告到企业微信\n  report-deploy:\n    image: clem109/drone-wechat\n    secrets:\n      - plugin_corp_secret\n      - plugin_corpid\n      - plugin_agent_id\n    title: '${DRONE_REPO_NAME}'\n    description: |\n      构建序列: ${DRONE_BUILD_NUMBER} 部署成功，干得好${DRONE_COMMIT_AUTHOR} ！\n      更新内容: ${DRONE_COMMIT_MESSAGE}\n    msg_url: 'http://project.company.com'\n    btn_txt: 点击前往\n    when:\n      branch: develop\n      status:\n        - success\n```\n\n对接企业微信之前，需要在企业微信中新建自定义应用，比如我们的应用名字叫Drone CI/CD。当然，您也可以给每一个项目创建一个企业微信App，这样虽然麻烦，但是可以让需要关注该项目的人关注到构建信息。\n\n下面是企业微信测试的截图：\n\n![ImageDroneBuilded](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/workwechat-report.png)\n\n企业微信与微信客户端是连通的，可玩性还不错：\n\n![ImageWechatNotify](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-notify.jpeg)\n\n在这里我认为有必要提醒一下，使用Drone的企业微信插件时，不要使用Drone Plugins列表里的企业微信。翻阅其源码可以发现，其中一个函数会将企业的敏感信息发送至私人服务器。不管作者本身是出于BaaS的好意，还是其它想法，我认为都是不妥的：\n\n![ImageDroneWrokwchatBadCode](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/bad-code.png)\n\n代码地址：https://github.com/lizheming/drone-wechat/blob/master/index.js\n\n在此Drone Plugins里的企业微信插件出现很久之前，我的好友Clément 克雷蒙同学写了一个企业微信插件，至今仍在使用。欢迎检查源代码，提issue提bug，为了不让克雷蒙同学骄傲，我并不打算号召大家给他star：[clem109/drone-wechat][ToolsWorkWechat]\n\n\n而在构建完成后，可以看到Drone控制面板里小伙伴们战斗过的痕迹：\n\n![ImageDroneRecords](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-records.png)\n\n## 五、ELK与Rancher的集成\n\nELK是ElasticSearch、Logstash与Kibana的集合，是一套非常强大的分布式日志方案。ELK的使用更多在于其本身的优化以及Kibana面向业务时的使用，这本身是一个很大的话题，只ElasticSearch就有许多奇技淫巧。因为人力资源的原因，我们使用了兄弟部门搭建的ELK，等同于使用已有的ELK服务。所以在此也不再赘述ELK的搭建，网上有许多资源可供参考。\n\n在这里要做的事情，就是把rancher中的日志归集到已有的ELK中。\n\n在rancher的catalog中找到logspout，这是一个logstash的adapter，为docker而生：\n\n![ImageLogRun](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/logspout_logs.png)\n\n在配置中设置LOGSPOUT=ignore，然后把ROUTE_URIS设置为已经搭建好的logstash地址，就可以将当前环境的日志集成到ELK中：\n\n![ImageLogConf](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/logspout_config.png)\n\n\n## 六、Traefik与Rancher的集成\n\n目前看来一切都很好，对吗？的确是这样。我们提交了代码，drone自动构建镜像到harbor，自动部署到rancher，自动发送构建结果，rancher又可以帮助自动重启死掉的container，使用rancher webhook也可以实现自动弹性计算，并且可以使用yaml文件定制构建流程，定制一些report信息，当构建或部署失败时，让企业微信自动侮辱我们的小伙伴……\n\n可是据说微服务还讲究服务注册和服务发现，如果并不想动用Zookeeper这样的核武器（就像我们不想用Kong一样，一是有一定学习和维护成本，二是Logo越改越丑），那就需要找到一个轻量级，能满足需求的替代品。况且目前并没有遇到需要削峰的处理。\n\n对于域名的解析，我们选择使用[Traefik][Traefik]作为LB，这个同样使用Golang编写，同样拥有将近13,000 Stars，并且兼具简单的服务注册和服务发现功能。更值得一提的是，Rancher catalog里的Traefik非常友好的集成了Let's Encrypt（ACME）的功能，可以做到自动申请SSL证书，过期自动续期。当然，不推荐在生产环境使用，SSL免费证书的数量非常容易达到阈值而使得域名无法访问。\n\nTraefik内部架构图(Image from traefik.io)：\n\n![ImageTraefikInternal](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik-processer.png)\n\n如何安装Traefik呢？我们以Rancher catalog中的Traefik为例（不使用ACME）：\n\n![ImageTraefikConfig](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_config.png)\n\n我们的目的是做域名解析，integration mode应该设置为**external**。Http Port设置为80，Https Port设置为443，Admin Port可以根据自己实际情况填写，默认8000。\n\n此时的Traefik已经准备就绪，但是打开traefik_host:8000查看控制面板时，发现Traefik并没有做任何代理。原因是需要在代理的目标中，使用rancher labels标示出traefik的代理方式。\n\n比如刚才安装的Drone，如果我们想代理到drone.company.com这个域名，则需要在drone server的container中设置lables：\n\n![ImageTraefikProxy](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_proxy.png)\n\n- traefik.enable=true 表示启用traefik代理\n- traefik.domain=company.com 表示traefik代理的根域名\n- traefik.port=8000 表示这个container对外暴露的端口\n- traefik.alias=drone 表示想将drone server这个container解析为drone.company.com\n\n需要注意的是，traefik.alias有可能导致重复解析，同时traefik有自己的一套默认解析规范。更详细的文档请看GitHub 地址：[rawmind0/alpine-traefik][rawmind0/alpine-traefik]\n\n在设置rancher labels后，可以看到Traefik的控制面板中，已经注册了服务地址：\n\n![ImageTraefikAdmin](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-admin.png)\n\n利用Traefik的这个特性和Rancher对于Container的弹性计算，可以做到简单的服务注册和服务发现。\n\n最后需要在域名服务商那里做A记录解析，解析的IP地址应为Traefik的公网地址。\n因为域名解析的默认端口是80和443，后面发生的事情就和Nginx的作用一毛一样了。域名解析到Traefik服务器的80端口（https则是443），Traefik发现这个域名已经注册到服务中，于是代理到10.xx开头的虚拟IP，转发请求并发送response。与Nginx Conf如出一辙：\n\n![ImageTraefikDomain](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/domain-proxy.png)\n\n\n至此，我们已经完全实现从代码提交，到自动部署以及域名解析的自动化。在生产环境的Traefik on Rancher中开启Https，可以把ssl的整个信任链以文本的形式粘贴进去，同时修改Traefik的Https选项为true即可：\n\n![ImageTraefikProd](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_prod.png)\n\n另外，Traefik并不是LB/Proxy的唯一选择，甚至不是最酷的选择，但确是目前与Rancher集成最好的。下面图中的程序都值得做调研（可以小小的注意一下istio，天庭饱满，骨骼轻奇，这还只是2017年7月底的数据……）：\n\n![ImageProxyStars](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/Proxy%20Stars.jpeg)\n\n> 事实上对于Traefik我们是又爱又恨。它能非常方便的与Rancher集成，功能简便强大，性能可观。但在最开始着实踩了不少坑，一度打算放弃并回归到传统的Nginx做反向代理的方式，甚至写了PR并被merge到master中。截止目前Rancher catalog中最新的1.5版本，已经是一个真正稳定可用的版本了。\n\n## 七、小技巧\n\nNode.js的项目中书写Dockerfile时，经常会用到yarn或者npm i来拉取依赖包。但npm的服务器远在世界的另一端，这时可以使用淘宝的镜像进行加速。通常我们在本地开发时执行会记得加上npm镜像，在服务器上跑Dockerfile也是一样的道理：\n```bash\nFROM node:alpine\nWORKDIR /app\nCOPY package.json .\nRUN npm i --registry https://registry.npm.taobao.org\nCOPY . .\nCMD [ \"node\", \"bin/www\" ]\n```\n\nDrone在构建镜像并推送到镜像仓库时，需要根据Dockerfile的基础镜像进行构建，而docker服务器也远在世界的另一端，同样的可以使用mirror来指定镜像仓库，并尽量使用alpine镜像缩小体积：\n```bash\npipeline:\n  build_step:\n    image: plugins/docker\n    username: harbor_name\n    password: harbor_pwd\n    registry: harbor.company.com\n    repo: harbor.company.com/repo/test\n    mirror: 'https://registry.docker-cn.com'\n```\n\n作大死命令，不要在服务器上使用。但本地开发很好用。意思是停止所有container，删除所有container，删除所有image：\n```bash\ndocker stop $(docker ps -aq) && docker rm $(docker ps -aq) && docker rmi $(docker images -aq)\n```\n\n## 八、结语，附带工具链汇总\n\n罗马不是一天建成，万丈高楼平地起。在企业发展之初，我们在打基础的同时，也要保证项目高速迭代。短时间内无法做到Netflix的体量以及其对于微服务治理的精妙，在运作的细节中也有诸多需要完善的部分，例如BDD、TDD的实践，传统意义上的UAT与蓝绿灰度发布，移动时代的全链路日志，服务熔断、隔离、限流以及降级的能力，亦或是星火燎原的Service Mesh……所以退一步讲，必须先生存，才能生活。我们可以允许服务死掉，但是要保证无感知或极短感知的情况下，服务能迅速的活过来。\n\n在持续交付的过程中，我们也尝试使用sonar代码质量管理，使用phabricator作为code review环节，因为配置的变更和微服务数量的逐渐增多，配置中心(主要考虑携程的Apollo)的引入也迫在眉睫，调用链监控以及代码重新埋点的成本(二节所述npm package rpc的优势又可体现)是否能抵过其带来的好处等等。但因目前尚未达到一个非常成熟的阶段，所以本次不再分享，仅表述其名来启发各位聪明的小伙伴。\n\n除此之外，技术视野的成长也非朝夕。就像我国政府在大家买不起自行车时就开始修建高速公路，时至今日，还能说它是面子(KPI)工程吗？与社区一同进步，开阔视野的同时，保持独立思考的能力，是比上述所有更为重要的技能。\n\n回到本文开头所写，一切都是赶鸭子上架。与其说笔者天资聪慧才貌过人风度翩翩儒雅风流，不如说这都是被逼的。同事抱怨流程繁琐不直观，若要做到代码和咖啡那样大繁若简，就需要思考CI/CD的目的与本质。大智若愚，真正的天才，必须能够让事情变得简单。\n\nRancher: [rancher/rancher][ToolsRancher]\n\nDrone: [drone/drone][ToolsDrone]\n\nDrone企业微信API插件: [clem109/drone-wechat][ToolsWorkWechat]\n\nHarbor: [vmware/harbor][ToolsHarbor]\n\nTraefik: [containous/traefik][ToolsTraefik]\n\nPhabricator: [phacility/phabricator][ToolsPhabricator]\n\nSonarQube: [SonarSource/sonarqube][ToolsSonar]\n\nLogspout: [gliderlabs/logspout][ToolsLogspout]\n\n配置中心(携程做的，代码写的还不错): [ctripcorp/apollo][ToolsConfigCenter]\n\nSuperSet(BI): [apache/incubator-superset][ToolsBI]\n\n[DroneGithub]:https://github.com/drone/drone\n[DroneDoc]:http://docs.drone.io\n[Zheng]:https://mp.weixin.qq.com/s/vhpmqJVJpnqQkSdp2oGhOg\n\n[ImageJsStack]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/js-fullstack.png\n[ImageDevOps]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/devops-srctions.png\n\n[ImageDroneInstall]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-install.png\n[ImageDroneInstalled]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone_installed.png\n[ImageDroneSwitched]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-switch-repo.png\n[ImageDroneBuilded]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/workwechat-report.png\n[ImageDroneWrokwchatBadCode]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/bad-code.png\n[ImageDroneRecords]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-records.png\n[ImageWechatNotify]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-notify.jpeg\n\n[ImageLogRun]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/logspout_logs.png\n[ImageLogConf]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/logspout_config.png\n\n[Traefik]:https://traefik.io\n[ImageTraefikConfig]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_config.png\n[ImageTraefikProxy]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_proxy.png\n[rawmind0/alpine-traefik]:https://github.com/rawmind0/alpine-traefik\n[ImageTraefikAdmin]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-admin.png\n[ImageTraefikDomain]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/domain-proxy.png\n[ImageTraefikProd]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_prod.png\n[ImageTraefikInternal]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik-processer.png\n[ImageProxyStars]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/Proxy%20Stars.jpeg\n\n[ToolsRancher]:https://github.com/rancher/rancher\n[ToolsDrone]:https://github.com/drone/drone\n[ToolsWorkWechat]:https://github.com/clem109/drone-wechat\n[ToolsHarbor]:https://github.com/vmware/harbor\n[ToolsTraefik]:https://github.com/containous/traefik\n[ToolsPhabricator]:https://github.com/phacility/phabricator\n[ToolsSonar]:https://github.com/SonarSource/sonarqube\n[ToolsLogspout]:https://github.com/gliderlabs/logspout\n[ToolsConfigCenter]:https://github.com/ctripcorp/apollo\n[ToolsBI]:https://github.com/apache/incubator-superset\n","source":"_posts/devops-ci-cd-with-rancher.md","raw":"---\ntitle: 基于Docker的 DevOps CI/CD实践\ndate: 2018-02-01 16:44:05\ntags: [devops,rancher,docker,ci,cd]\ncategories: [个人]\n---\n\n本文默认已经安装好了Rancher，如果没有安装：\n```bash\nsudo docker run -d --restart=unless-stopped -p 8080:8080 rancher/server\n```\n\n## 零、前言\n\n相信我，一切事情的发生都是赶鸭子上架，没有例外。人类所有伟大的变革都是迫不得已，可又是那么顺其自然。比如容器（docker）技术的诞生，比如箭在弦上的创业，比如野心勃勃的kubernetes，比如如今已作为左膀右臂的rancher，比如这篇文章。\n\n不同于阿里云的CI/CD实践（[如何利用Docker构建基于DevOps的全自动CI][Zheng]），我们结合自身状况，构建了一套我们自己的DevOps CI/CD流程，更轻更小，更适合Startup。\n\n<!-- more --> \n\n\n## 一、合适的才是最好的（Node.js & Docker）\n\n如果世界只有FLAG、BAT，那就太无趣了。iHealth是一家初创型公司，我所在的部门有大概10名研发人员，在担负着三端研发工作的同时，所有围绕服务的交付和运维工作也都是我们来做。\n\n技术的选型上，服务端、Web端和移动端（Android、iOS）都要上，但人少。所以招人的时候并没有以貌取人的资格，部门对外的Title都是全栈。能一门语言通吃三端，群众基础广泛，恐怕没有比Javascript/Typescript(Node.js)更合适的了。\n\n服务端有Express、Koa、Feather、Nest、Meteor等各有其长的框架，前端大而火的Reactjs、Vuejs和Angular，不管是Server Render还是前后端分离，都可以得心应手。因为公司的健康设备（血糖仪、血压计、体温计、血氧、体脂秤等等）会有专门的部门研发设计以及提供SDK，所以移动端的研发工作更多是在设计实现和性能优化上，React Native是一枚大杀器。虽然现在公司并没有桌面端的需求，但不能否认的是Electron是一个很有趣的项目，也为“全栈”这个词增加了更多背书。\n\n![ImageJsStack](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/js-fullstack.png)\n\n另外，选择使用Node/Js/Ts作为全栈的基础会附带有RPC的好处。无需集成传统意义上的RPC框架（如gRPC），只需在编写远程(微)服务方法时，编写相应的npm package，也可以达到相同的目的，且成本更小，更易理解。\n\n运维环境的选型上，所有的业务都运行在云端，省去了机房维护和服务器运维的成本。其实在盘古开荒时，我们也是编写了Node程序后，使用PM2部署在服务器上，并没有使用Docker。当然也存在没有使用Docker所带来的一切问题：三端不同步、环境无法隔离……而Docker带给我最大的惊喜除了超强的可移植性，更在于研发人员可以非常容易对程序的顶级架构进行推理。\n\n事实上，我们直接使用docker-compose做容器编排着实有一段时间，在一次大规模的服务器迁移中，发现需要重新思考越来越多的container管理和更完善的编排方案。Rancher（Cattle）就是在这时被应用到技术栈中。\n\n\n## 二、一切从Github开始\n\n在运维环境一波三折的同时，DevOps的征程也是亦步亦趋，步步惊心。幸运的是，我们知道自己缺乏什么，想要什么，所以能比较容易的做到“哪里不会点哪里”。如同上一章节所述，合适的才是最好的。持续集成（CI）与持续交付（CD）的迭代过程，从最初的代码拷贝，到结合docker-compose与rsync命令，到使用CI/CD工具，做到相对意义上的自动化……迄今为止，我们摸索出一套相对好用并且好玩的流程。\n\n![ImageDevOps](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/devops-srctions.png)\n\n故事大致是这样的，当一只代码猴提交代码之后，他需要去接一杯咖啡。在猫屎氤氲的雾气里45°角仰望天花板，手机微信提醒这次构建成功（或失败，并附带污言秽语）。这时他可以开始往工位走，坐下时，微信又会提醒本次部署到Rancher成功（或失败）。\n\n这一切开始的地方是github。当开发者写完 ~~BUG~~ 功能之后，需要有地方保存这些宝贵的资料。之所以没有使用Gitlab或Bitbucket搭建私有的Git服务器，是因为我们认为代码是最直接的价值体现。服务如骨架，终端如皮肤，UE如衣服，三者组成让人赏心悦目的风景，代码是这背后的基础。我们认为在团队精力无法更分散、人口规模尚小时，购买Github的商业版是稳妥且必要的，毕竟那帮人修复一次故障就像把网线拔下来再插上那样简单。\n\n\n## 三、Drone CI\n\nDrone这个单词在翻译中译作雄蜂、无人机。我特意咨询了一位精通一千零二十四国语言的英国朋友，说这个词的意思是autonomous，works by itself。白话就是有活它自己干，而且是自主的。不过这个解释对于Drone来说名副其实。这个在[Github][DroneGithub]上拥有13,000+ Stars的开源项目，使用Golang编写，相比Jenkins的大而全，Drone是为Docker而生的CI软件。如果有使用过Gitlab CI的小伙伴，相信对Drone的使用方式不会感到陌生，他们都是使用Yaml风格文件来定义pipeline：\n\n```yaml\npipeline:\n  build:\n    image: node:latest\n    commands:\n      - npm install\n      - npm run lint\n      - npm run test\n  publish:\n    image: plugins/npm\n    when:\n      branch: master\n```\n\n\nDrone的安装方式如同Rancher一样简单，一行docker命令即可。当然，大家也可以看[Drone的官方文档][DroneDoc]，在这里，只讲一下使用Rancher catalog安装Drone的方式：\n\n![ImageDroneInstall](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-install.png)\n\n查看大图大家可以看到Drone使用Rancher catalog安装的方法（with github），在Github 的Settings中创建Drone的OAuth App时，Home Page Url务必要写你能访问Drone的IP地址或域名，例如：\n> http://drone.company.com\n\n而OAuth App的Authorization callback URL应该对应上面的写法：\n> http://drone.company.com/authorize\n\n小功告成：\n\n![ImageDroneInstalled](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone_installed.png)\n\n\n登录进Drone之后，在Repositories中找到你想要开启CI的Git Repo，用switch按钮打开它：\n\n![ImageDroneSwitched](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-switch-repo.png)\n\n这表示已经打开了Drone对于这个Repo的webhook，当有代码提交时，Drone会检测这个Repo的根目录中是否包含.drone.yml文件，如果存在，则根据yaml文件定义的pipeline执行CI流程。\n\n## 四、Drone与rancher、harbor、企业微信的集成\n\n在决定使用Drone之前，需要知道的是，Drone是一个高度依赖社区的项目。其文档诸多不完善（完善过，版本迭代，文档跟不上了），plugins质量良莠。但对于擅长Github issue、Google、Stackoverflow的朋友来说，这并不是特别困难的事情。Drone也有付费版本，无需自己提供服务器，而是像Github那样作为服务使用。\n\n如果你决定开始使用Drone，截止到上面的步骤，我们打开了Drone对于Github Repo的监听，再次提醒，需要在代码repo的根目录包含.drone.yml文件，才会真正触发Drone的pipeline。\n\n那么，如果想重现上面故事中的场景，应该如何进行集成呢？\n\n我司在构建CI/CD的过程中，现使用Harbor作为私有镜像仓库，从提交代码到自动部署到Rancher，其实应当经历如下步骤：\n\n- 提交代码，触发Github Webhook\n- Drone使用docker插件，根据Dockerfile构建镜像，并推送到Harbor中\n- Drone使用rancher插件，根据stack/service，部署上面构建好的image\n- Drone使用企业微信插件，报告部署结果\n\n在这里节选公司项目中的一段yaml代码，描述了上述步骤：\n```yaml\n# .drone.yaml\n\npipeline:\n  # 使用plugins/docker插件，构建镜像，推送到harbor\n  build_step:\n    image: plugins/docker\n    username: harbor_username\n    password: harbor_password\n    registry: harbor.company.com\n    repo: harbor.company.com/registry/test\n    mirror: 'https://registry.docker-cn.com'\n    tag:\n      - dev\n    dockerfile: Dockerfile\n    when:\n      branch: develop\n      event: push\n  \n  # 使用rancher插件，自动更新实例\n  rancher:\n    image: peloton/drone-rancher\n    url: 'http://rancher.company.com/v2-beta/projects/1a870'\n    access_key: rancher access key\n    secret_key: rancher secret key\n    service: rancher_stack/rancher_service\n    docker_image: 'harbor.company.com/registry/test:dev'\n    batch_size: 1\n    timeout: 600\n    confirm: true\n    when:\n      branch: develop\n      event: push\n      \n  # 使用clem109/drone-wechat插件，报告到企业微信\n  report-deploy:\n    image: clem109/drone-wechat\n    secrets:\n      - plugin_corp_secret\n      - plugin_corpid\n      - plugin_agent_id\n    title: '${DRONE_REPO_NAME}'\n    description: |\n      构建序列: ${DRONE_BUILD_NUMBER} 部署成功，干得好${DRONE_COMMIT_AUTHOR} ！\n      更新内容: ${DRONE_COMMIT_MESSAGE}\n    msg_url: 'http://project.company.com'\n    btn_txt: 点击前往\n    when:\n      branch: develop\n      status:\n        - success\n```\n\n对接企业微信之前，需要在企业微信中新建自定义应用，比如我们的应用名字叫Drone CI/CD。当然，您也可以给每一个项目创建一个企业微信App，这样虽然麻烦，但是可以让需要关注该项目的人关注到构建信息。\n\n下面是企业微信测试的截图：\n\n![ImageDroneBuilded](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/workwechat-report.png)\n\n企业微信与微信客户端是连通的，可玩性还不错：\n\n![ImageWechatNotify](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-notify.jpeg)\n\n在这里我认为有必要提醒一下，使用Drone的企业微信插件时，不要使用Drone Plugins列表里的企业微信。翻阅其源码可以发现，其中一个函数会将企业的敏感信息发送至私人服务器。不管作者本身是出于BaaS的好意，还是其它想法，我认为都是不妥的：\n\n![ImageDroneWrokwchatBadCode](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/bad-code.png)\n\n代码地址：https://github.com/lizheming/drone-wechat/blob/master/index.js\n\n在此Drone Plugins里的企业微信插件出现很久之前，我的好友Clément 克雷蒙同学写了一个企业微信插件，至今仍在使用。欢迎检查源代码，提issue提bug，为了不让克雷蒙同学骄傲，我并不打算号召大家给他star：[clem109/drone-wechat][ToolsWorkWechat]\n\n\n而在构建完成后，可以看到Drone控制面板里小伙伴们战斗过的痕迹：\n\n![ImageDroneRecords](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-records.png)\n\n## 五、ELK与Rancher的集成\n\nELK是ElasticSearch、Logstash与Kibana的集合，是一套非常强大的分布式日志方案。ELK的使用更多在于其本身的优化以及Kibana面向业务时的使用，这本身是一个很大的话题，只ElasticSearch就有许多奇技淫巧。因为人力资源的原因，我们使用了兄弟部门搭建的ELK，等同于使用已有的ELK服务。所以在此也不再赘述ELK的搭建，网上有许多资源可供参考。\n\n在这里要做的事情，就是把rancher中的日志归集到已有的ELK中。\n\n在rancher的catalog中找到logspout，这是一个logstash的adapter，为docker而生：\n\n![ImageLogRun](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/logspout_logs.png)\n\n在配置中设置LOGSPOUT=ignore，然后把ROUTE_URIS设置为已经搭建好的logstash地址，就可以将当前环境的日志集成到ELK中：\n\n![ImageLogConf](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/logspout_config.png)\n\n\n## 六、Traefik与Rancher的集成\n\n目前看来一切都很好，对吗？的确是这样。我们提交了代码，drone自动构建镜像到harbor，自动部署到rancher，自动发送构建结果，rancher又可以帮助自动重启死掉的container，使用rancher webhook也可以实现自动弹性计算，并且可以使用yaml文件定制构建流程，定制一些report信息，当构建或部署失败时，让企业微信自动侮辱我们的小伙伴……\n\n可是据说微服务还讲究服务注册和服务发现，如果并不想动用Zookeeper这样的核武器（就像我们不想用Kong一样，一是有一定学习和维护成本，二是Logo越改越丑），那就需要找到一个轻量级，能满足需求的替代品。况且目前并没有遇到需要削峰的处理。\n\n对于域名的解析，我们选择使用[Traefik][Traefik]作为LB，这个同样使用Golang编写，同样拥有将近13,000 Stars，并且兼具简单的服务注册和服务发现功能。更值得一提的是，Rancher catalog里的Traefik非常友好的集成了Let's Encrypt（ACME）的功能，可以做到自动申请SSL证书，过期自动续期。当然，不推荐在生产环境使用，SSL免费证书的数量非常容易达到阈值而使得域名无法访问。\n\nTraefik内部架构图(Image from traefik.io)：\n\n![ImageTraefikInternal](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik-processer.png)\n\n如何安装Traefik呢？我们以Rancher catalog中的Traefik为例（不使用ACME）：\n\n![ImageTraefikConfig](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_config.png)\n\n我们的目的是做域名解析，integration mode应该设置为**external**。Http Port设置为80，Https Port设置为443，Admin Port可以根据自己实际情况填写，默认8000。\n\n此时的Traefik已经准备就绪，但是打开traefik_host:8000查看控制面板时，发现Traefik并没有做任何代理。原因是需要在代理的目标中，使用rancher labels标示出traefik的代理方式。\n\n比如刚才安装的Drone，如果我们想代理到drone.company.com这个域名，则需要在drone server的container中设置lables：\n\n![ImageTraefikProxy](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_proxy.png)\n\n- traefik.enable=true 表示启用traefik代理\n- traefik.domain=company.com 表示traefik代理的根域名\n- traefik.port=8000 表示这个container对外暴露的端口\n- traefik.alias=drone 表示想将drone server这个container解析为drone.company.com\n\n需要注意的是，traefik.alias有可能导致重复解析，同时traefik有自己的一套默认解析规范。更详细的文档请看GitHub 地址：[rawmind0/alpine-traefik][rawmind0/alpine-traefik]\n\n在设置rancher labels后，可以看到Traefik的控制面板中，已经注册了服务地址：\n\n![ImageTraefikAdmin](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-admin.png)\n\n利用Traefik的这个特性和Rancher对于Container的弹性计算，可以做到简单的服务注册和服务发现。\n\n最后需要在域名服务商那里做A记录解析，解析的IP地址应为Traefik的公网地址。\n因为域名解析的默认端口是80和443，后面发生的事情就和Nginx的作用一毛一样了。域名解析到Traefik服务器的80端口（https则是443），Traefik发现这个域名已经注册到服务中，于是代理到10.xx开头的虚拟IP，转发请求并发送response。与Nginx Conf如出一辙：\n\n![ImageTraefikDomain](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/domain-proxy.png)\n\n\n至此，我们已经完全实现从代码提交，到自动部署以及域名解析的自动化。在生产环境的Traefik on Rancher中开启Https，可以把ssl的整个信任链以文本的形式粘贴进去，同时修改Traefik的Https选项为true即可：\n\n![ImageTraefikProd](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_prod.png)\n\n另外，Traefik并不是LB/Proxy的唯一选择，甚至不是最酷的选择，但确是目前与Rancher集成最好的。下面图中的程序都值得做调研（可以小小的注意一下istio，天庭饱满，骨骼轻奇，这还只是2017年7月底的数据……）：\n\n![ImageProxyStars](https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/Proxy%20Stars.jpeg)\n\n> 事实上对于Traefik我们是又爱又恨。它能非常方便的与Rancher集成，功能简便强大，性能可观。但在最开始着实踩了不少坑，一度打算放弃并回归到传统的Nginx做反向代理的方式，甚至写了PR并被merge到master中。截止目前Rancher catalog中最新的1.5版本，已经是一个真正稳定可用的版本了。\n\n## 七、小技巧\n\nNode.js的项目中书写Dockerfile时，经常会用到yarn或者npm i来拉取依赖包。但npm的服务器远在世界的另一端，这时可以使用淘宝的镜像进行加速。通常我们在本地开发时执行会记得加上npm镜像，在服务器上跑Dockerfile也是一样的道理：\n```bash\nFROM node:alpine\nWORKDIR /app\nCOPY package.json .\nRUN npm i --registry https://registry.npm.taobao.org\nCOPY . .\nCMD [ \"node\", \"bin/www\" ]\n```\n\nDrone在构建镜像并推送到镜像仓库时，需要根据Dockerfile的基础镜像进行构建，而docker服务器也远在世界的另一端，同样的可以使用mirror来指定镜像仓库，并尽量使用alpine镜像缩小体积：\n```bash\npipeline:\n  build_step:\n    image: plugins/docker\n    username: harbor_name\n    password: harbor_pwd\n    registry: harbor.company.com\n    repo: harbor.company.com/repo/test\n    mirror: 'https://registry.docker-cn.com'\n```\n\n作大死命令，不要在服务器上使用。但本地开发很好用。意思是停止所有container，删除所有container，删除所有image：\n```bash\ndocker stop $(docker ps -aq) && docker rm $(docker ps -aq) && docker rmi $(docker images -aq)\n```\n\n## 八、结语，附带工具链汇总\n\n罗马不是一天建成，万丈高楼平地起。在企业发展之初，我们在打基础的同时，也要保证项目高速迭代。短时间内无法做到Netflix的体量以及其对于微服务治理的精妙，在运作的细节中也有诸多需要完善的部分，例如BDD、TDD的实践，传统意义上的UAT与蓝绿灰度发布，移动时代的全链路日志，服务熔断、隔离、限流以及降级的能力，亦或是星火燎原的Service Mesh……所以退一步讲，必须先生存，才能生活。我们可以允许服务死掉，但是要保证无感知或极短感知的情况下，服务能迅速的活过来。\n\n在持续交付的过程中，我们也尝试使用sonar代码质量管理，使用phabricator作为code review环节，因为配置的变更和微服务数量的逐渐增多，配置中心(主要考虑携程的Apollo)的引入也迫在眉睫，调用链监控以及代码重新埋点的成本(二节所述npm package rpc的优势又可体现)是否能抵过其带来的好处等等。但因目前尚未达到一个非常成熟的阶段，所以本次不再分享，仅表述其名来启发各位聪明的小伙伴。\n\n除此之外，技术视野的成长也非朝夕。就像我国政府在大家买不起自行车时就开始修建高速公路，时至今日，还能说它是面子(KPI)工程吗？与社区一同进步，开阔视野的同时，保持独立思考的能力，是比上述所有更为重要的技能。\n\n回到本文开头所写，一切都是赶鸭子上架。与其说笔者天资聪慧才貌过人风度翩翩儒雅风流，不如说这都是被逼的。同事抱怨流程繁琐不直观，若要做到代码和咖啡那样大繁若简，就需要思考CI/CD的目的与本质。大智若愚，真正的天才，必须能够让事情变得简单。\n\nRancher: [rancher/rancher][ToolsRancher]\n\nDrone: [drone/drone][ToolsDrone]\n\nDrone企业微信API插件: [clem109/drone-wechat][ToolsWorkWechat]\n\nHarbor: [vmware/harbor][ToolsHarbor]\n\nTraefik: [containous/traefik][ToolsTraefik]\n\nPhabricator: [phacility/phabricator][ToolsPhabricator]\n\nSonarQube: [SonarSource/sonarqube][ToolsSonar]\n\nLogspout: [gliderlabs/logspout][ToolsLogspout]\n\n配置中心(携程做的，代码写的还不错): [ctripcorp/apollo][ToolsConfigCenter]\n\nSuperSet(BI): [apache/incubator-superset][ToolsBI]\n\n[DroneGithub]:https://github.com/drone/drone\n[DroneDoc]:http://docs.drone.io\n[Zheng]:https://mp.weixin.qq.com/s/vhpmqJVJpnqQkSdp2oGhOg\n\n[ImageJsStack]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/js-fullstack.png\n[ImageDevOps]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/devops-srctions.png\n\n[ImageDroneInstall]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-install.png\n[ImageDroneInstalled]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone_installed.png\n[ImageDroneSwitched]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-switch-repo.png\n[ImageDroneBuilded]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/workwechat-report.png\n[ImageDroneWrokwchatBadCode]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/bad-code.png\n[ImageDroneRecords]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-records.png\n[ImageWechatNotify]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-notify.jpeg\n\n[ImageLogRun]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/logspout_logs.png\n[ImageLogConf]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/logspout_config.png\n\n[Traefik]:https://traefik.io\n[ImageTraefikConfig]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_config.png\n[ImageTraefikProxy]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_proxy.png\n[rawmind0/alpine-traefik]:https://github.com/rawmind0/alpine-traefik\n[ImageTraefikAdmin]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-admin.png\n[ImageTraefikDomain]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/domain-proxy.png\n[ImageTraefikProd]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_prod.png\n[ImageTraefikInternal]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik-processer.png\n[ImageProxyStars]:https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/Proxy%20Stars.jpeg\n\n[ToolsRancher]:https://github.com/rancher/rancher\n[ToolsDrone]:https://github.com/drone/drone\n[ToolsWorkWechat]:https://github.com/clem109/drone-wechat\n[ToolsHarbor]:https://github.com/vmware/harbor\n[ToolsTraefik]:https://github.com/containous/traefik\n[ToolsPhabricator]:https://github.com/phacility/phabricator\n[ToolsSonar]:https://github.com/SonarSource/sonarqube\n[ToolsLogspout]:https://github.com/gliderlabs/logspout\n[ToolsConfigCenter]:https://github.com/ctripcorp/apollo\n[ToolsBI]:https://github.com/apache/incubator-superset\n","slug":"devops-ci-cd-with-rancher","published":1,"updated":"2020-10-19T06:53:10.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgg8680u000aexx48cekguff","content":"<p>本文默认已经安装好了Rancher，如果没有安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --restart=unless-stopped -p 8080:8080 rancher/server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"零、前言\"><a href=\"#零、前言\" class=\"headerlink\" title=\"零、前言\"></a>零、前言</h2><p>相信我，一切事情的发生都是赶鸭子上架，没有例外。人类所有伟大的变革都是迫不得已，可又是那么顺其自然。比如容器（docker）技术的诞生，比如箭在弦上的创业，比如野心勃勃的kubernetes，比如如今已作为左膀右臂的rancher，比如这篇文章。</p>\n<p>不同于阿里云的CI/CD实践（<a href=\"https://mp.weixin.qq.com/s/vhpmqJVJpnqQkSdp2oGhOg\">如何利用Docker构建基于DevOps的全自动CI</a>），我们结合自身状况，构建了一套我们自己的DevOps CI/CD流程，更轻更小，更适合Startup。</p>\n<a id=\"more\"></a> \n\n\n<h2 id=\"一、合适的才是最好的（Node-js-amp-Docker）\"><a href=\"#一、合适的才是最好的（Node-js-amp-Docker）\" class=\"headerlink\" title=\"一、合适的才是最好的（Node.js &amp; Docker）\"></a>一、合适的才是最好的（Node.js &amp; Docker）</h2><p>如果世界只有FLAG、BAT，那就太无趣了。iHealth是一家初创型公司，我所在的部门有大概10名研发人员，在担负着三端研发工作的同时，所有围绕服务的交付和运维工作也都是我们来做。</p>\n<p>技术的选型上，服务端、Web端和移动端（Android、iOS）都要上，但人少。所以招人的时候并没有以貌取人的资格，部门对外的Title都是全栈。能一门语言通吃三端，群众基础广泛，恐怕没有比Javascript/Typescript(Node.js)更合适的了。</p>\n<p>服务端有Express、Koa、Feather、Nest、Meteor等各有其长的框架，前端大而火的Reactjs、Vuejs和Angular，不管是Server Render还是前后端分离，都可以得心应手。因为公司的健康设备（血糖仪、血压计、体温计、血氧、体脂秤等等）会有专门的部门研发设计以及提供SDK，所以移动端的研发工作更多是在设计实现和性能优化上，React Native是一枚大杀器。虽然现在公司并没有桌面端的需求，但不能否认的是Electron是一个很有趣的项目，也为“全栈”这个词增加了更多背书。</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/js-fullstack.png\" alt=\"ImageJsStack\"></p>\n<p>另外，选择使用Node/Js/Ts作为全栈的基础会附带有RPC的好处。无需集成传统意义上的RPC框架（如gRPC），只需在编写远程(微)服务方法时，编写相应的npm package，也可以达到相同的目的，且成本更小，更易理解。</p>\n<p>运维环境的选型上，所有的业务都运行在云端，省去了机房维护和服务器运维的成本。其实在盘古开荒时，我们也是编写了Node程序后，使用PM2部署在服务器上，并没有使用Docker。当然也存在没有使用Docker所带来的一切问题：三端不同步、环境无法隔离……而Docker带给我最大的惊喜除了超强的可移植性，更在于研发人员可以非常容易对程序的顶级架构进行推理。</p>\n<p>事实上，我们直接使用docker-compose做容器编排着实有一段时间，在一次大规模的服务器迁移中，发现需要重新思考越来越多的container管理和更完善的编排方案。Rancher（Cattle）就是在这时被应用到技术栈中。</p>\n<h2 id=\"二、一切从Github开始\"><a href=\"#二、一切从Github开始\" class=\"headerlink\" title=\"二、一切从Github开始\"></a>二、一切从Github开始</h2><p>在运维环境一波三折的同时，DevOps的征程也是亦步亦趋，步步惊心。幸运的是，我们知道自己缺乏什么，想要什么，所以能比较容易的做到“哪里不会点哪里”。如同上一章节所述，合适的才是最好的。持续集成（CI）与持续交付（CD）的迭代过程，从最初的代码拷贝，到结合docker-compose与rsync命令，到使用CI/CD工具，做到相对意义上的自动化……迄今为止，我们摸索出一套相对好用并且好玩的流程。</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/devops-srctions.png\" alt=\"ImageDevOps\"></p>\n<p>故事大致是这样的，当一只代码猴提交代码之后，他需要去接一杯咖啡。在猫屎氤氲的雾气里45°角仰望天花板，手机微信提醒这次构建成功（或失败，并附带污言秽语）。这时他可以开始往工位走，坐下时，微信又会提醒本次部署到Rancher成功（或失败）。</p>\n<p>这一切开始的地方是github。当开发者写完 <del>BUG</del> 功能之后，需要有地方保存这些宝贵的资料。之所以没有使用Gitlab或Bitbucket搭建私有的Git服务器，是因为我们认为代码是最直接的价值体现。服务如骨架，终端如皮肤，UE如衣服，三者组成让人赏心悦目的风景，代码是这背后的基础。我们认为在团队精力无法更分散、人口规模尚小时，购买Github的商业版是稳妥且必要的，毕竟那帮人修复一次故障就像把网线拔下来再插上那样简单。</p>\n<h2 id=\"三、Drone-CI\"><a href=\"#三、Drone-CI\" class=\"headerlink\" title=\"三、Drone CI\"></a>三、Drone CI</h2><p>Drone这个单词在翻译中译作雄蜂、无人机。我特意咨询了一位精通一千零二十四国语言的英国朋友，说这个词的意思是autonomous，works by itself。白话就是有活它自己干，而且是自主的。不过这个解释对于Drone来说名副其实。这个在<a href=\"https://github.com/drone/drone\">Github</a>上拥有13,000+ Stars的开源项目，使用Golang编写，相比Jenkins的大而全，Drone是为Docker而生的CI软件。如果有使用过Gitlab CI的小伙伴，相信对Drone的使用方式不会感到陌生，他们都是使用Yaml风格文件来定义pipeline：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pipeline:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">node:latest</span></span><br><span class=\"line\">    <span class=\"attr\">commands:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">lint</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">publish:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">plugins/npm</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span></span><br><span class=\"line\">      <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n\n<p>Drone的安装方式如同Rancher一样简单，一行docker命令即可。当然，大家也可以看<a href=\"http://docs.drone.io/\">Drone的官方文档</a>，在这里，只讲一下使用Rancher catalog安装Drone的方式：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-install.png\" alt=\"ImageDroneInstall\"></p>\n<p>查看大图大家可以看到Drone使用Rancher catalog安装的方法（with github），在Github 的Settings中创建Drone的OAuth App时，Home Page Url务必要写你能访问Drone的IP地址或域名，例如：</p>\n<blockquote>\n<p><a href=\"http://drone.company.com/\">http://drone.company.com</a></p>\n</blockquote>\n<p>而OAuth App的Authorization callback URL应该对应上面的写法：</p>\n<blockquote>\n<p><a href=\"http://drone.company.com/authorize\">http://drone.company.com/authorize</a></p>\n</blockquote>\n<p>小功告成：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone_installed.png\" alt=\"ImageDroneInstalled\"></p>\n<p>登录进Drone之后，在Repositories中找到你想要开启CI的Git Repo，用switch按钮打开它：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-switch-repo.png\" alt=\"ImageDroneSwitched\"></p>\n<p>这表示已经打开了Drone对于这个Repo的webhook，当有代码提交时，Drone会检测这个Repo的根目录中是否包含.drone.yml文件，如果存在，则根据yaml文件定义的pipeline执行CI流程。</p>\n<h2 id=\"四、Drone与rancher、harbor、企业微信的集成\"><a href=\"#四、Drone与rancher、harbor、企业微信的集成\" class=\"headerlink\" title=\"四、Drone与rancher、harbor、企业微信的集成\"></a>四、Drone与rancher、harbor、企业微信的集成</h2><p>在决定使用Drone之前，需要知道的是，Drone是一个高度依赖社区的项目。其文档诸多不完善（完善过，版本迭代，文档跟不上了），plugins质量良莠。但对于擅长Github issue、Google、Stackoverflow的朋友来说，这并不是特别困难的事情。Drone也有付费版本，无需自己提供服务器，而是像Github那样作为服务使用。</p>\n<p>如果你决定开始使用Drone，截止到上面的步骤，我们打开了Drone对于Github Repo的监听，再次提醒，需要在代码repo的根目录包含.drone.yml文件，才会真正触发Drone的pipeline。</p>\n<p>那么，如果想重现上面故事中的场景，应该如何进行集成呢？</p>\n<p>我司在构建CI/CD的过程中，现使用Harbor作为私有镜像仓库，从提交代码到自动部署到Rancher，其实应当经历如下步骤：</p>\n<ul>\n<li>提交代码，触发Github Webhook</li>\n<li>Drone使用docker插件，根据Dockerfile构建镜像，并推送到Harbor中</li>\n<li>Drone使用rancher插件，根据stack/service，部署上面构建好的image</li>\n<li>Drone使用企业微信插件，报告部署结果</li>\n</ul>\n<p>在这里节选公司项目中的一段yaml代码，描述了上述步骤：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .drone.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">pipeline:</span></span><br><span class=\"line\">  <span class=\"comment\"># 使用plugins/docker插件，构建镜像，推送到harbor</span></span><br><span class=\"line\">  <span class=\"attr\">build_step:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">plugins/docker</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">harbor_username</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">harbor_password</span></span><br><span class=\"line\">    <span class=\"attr\">registry:</span> <span class=\"string\">harbor.company.com</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">harbor.company.com/registry/test</span></span><br><span class=\"line\">    <span class=\"attr\">mirror:</span> <span class=\"string\">&#x27;https://registry.docker-cn.com&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">tag:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">dev</span></span><br><span class=\"line\">    <span class=\"attr\">dockerfile:</span> <span class=\"string\">Dockerfile</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span></span><br><span class=\"line\">      <span class=\"attr\">branch:</span> <span class=\"string\">develop</span></span><br><span class=\"line\">      <span class=\"attr\">event:</span> <span class=\"string\">push</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># 使用rancher插件，自动更新实例</span></span><br><span class=\"line\">  <span class=\"attr\">rancher:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">peloton/drone-rancher</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">&#x27;http://rancher.company.com/v2-beta/projects/1a870&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">access_key:</span> <span class=\"string\">rancher</span> <span class=\"string\">access</span> <span class=\"string\">key</span></span><br><span class=\"line\">    <span class=\"attr\">secret_key:</span> <span class=\"string\">rancher</span> <span class=\"string\">secret</span> <span class=\"string\">key</span></span><br><span class=\"line\">    <span class=\"attr\">service:</span> <span class=\"string\">rancher_stack/rancher_service</span></span><br><span class=\"line\">    <span class=\"attr\">docker_image:</span> <span class=\"string\">&#x27;harbor.company.com/registry/test:dev&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">batch_size:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"number\">600</span></span><br><span class=\"line\">    <span class=\"attr\">confirm:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span></span><br><span class=\"line\">      <span class=\"attr\">branch:</span> <span class=\"string\">develop</span></span><br><span class=\"line\">      <span class=\"attr\">event:</span> <span class=\"string\">push</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"comment\"># 使用clem109/drone-wechat插件，报告到企业微信</span></span><br><span class=\"line\">  <span class=\"attr\">report-deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">clem109/drone-wechat</span></span><br><span class=\"line\">    <span class=\"attr\">secrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">plugin_corp_secret</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">plugin_corpid</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">plugin_agent_id</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">&#x27;$&#123;DRONE_REPO_NAME&#125;&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">|</span></span><br><span class=\"line\">      <span class=\"string\">构建序列:</span> <span class=\"string\">$&#123;DRONE_BUILD_NUMBER&#125;</span> <span class=\"string\">部署成功，干得好$&#123;DRONE_COMMIT_AUTHOR&#125;</span> <span class=\"string\">！</span></span><br><span class=\"line\">      <span class=\"string\">更新内容:</span> <span class=\"string\">$&#123;DRONE_COMMIT_MESSAGE&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">msg_url:</span> <span class=\"string\">&#x27;http://project.company.com&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">btn_txt:</span> <span class=\"string\">点击前往</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span></span><br><span class=\"line\">      <span class=\"attr\">branch:</span> <span class=\"string\">develop</span></span><br><span class=\"line\">      <span class=\"attr\">status:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">success</span></span><br></pre></td></tr></table></figure>\n\n<p>对接企业微信之前，需要在企业微信中新建自定义应用，比如我们的应用名字叫Drone CI/CD。当然，您也可以给每一个项目创建一个企业微信App，这样虽然麻烦，但是可以让需要关注该项目的人关注到构建信息。</p>\n<p>下面是企业微信测试的截图：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/workwechat-report.png\" alt=\"ImageDroneBuilded\"></p>\n<p>企业微信与微信客户端是连通的，可玩性还不错：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-notify.jpeg\" alt=\"ImageWechatNotify\"></p>\n<p>在这里我认为有必要提醒一下，使用Drone的企业微信插件时，不要使用Drone Plugins列表里的企业微信。翻阅其源码可以发现，其中一个函数会将企业的敏感信息发送至私人服务器。不管作者本身是出于BaaS的好意，还是其它想法，我认为都是不妥的：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/bad-code.png\" alt=\"ImageDroneWrokwchatBadCode\"></p>\n<p>代码地址：<a href=\"https://github.com/lizheming/drone-wechat/blob/master/index.js\">https://github.com/lizheming/drone-wechat/blob/master/index.js</a></p>\n<p>在此Drone Plugins里的企业微信插件出现很久之前，我的好友Clément 克雷蒙同学写了一个企业微信插件，至今仍在使用。欢迎检查源代码，提issue提bug，为了不让克雷蒙同学骄傲，我并不打算号召大家给他star：<a href=\"https://github.com/clem109/drone-wechat\">clem109/drone-wechat</a></p>\n<p>而在构建完成后，可以看到Drone控制面板里小伙伴们战斗过的痕迹：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-records.png\" alt=\"ImageDroneRecords\"></p>\n<h2 id=\"五、ELK与Rancher的集成\"><a href=\"#五、ELK与Rancher的集成\" class=\"headerlink\" title=\"五、ELK与Rancher的集成\"></a>五、ELK与Rancher的集成</h2><p>ELK是ElasticSearch、Logstash与Kibana的集合，是一套非常强大的分布式日志方案。ELK的使用更多在于其本身的优化以及Kibana面向业务时的使用，这本身是一个很大的话题，只ElasticSearch就有许多奇技淫巧。因为人力资源的原因，我们使用了兄弟部门搭建的ELK，等同于使用已有的ELK服务。所以在此也不再赘述ELK的搭建，网上有许多资源可供参考。</p>\n<p>在这里要做的事情，就是把rancher中的日志归集到已有的ELK中。</p>\n<p>在rancher的catalog中找到logspout，这是一个logstash的adapter，为docker而生：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/logspout_logs.png\" alt=\"ImageLogRun\"></p>\n<p>在配置中设置LOGSPOUT=ignore，然后把ROUTE_URIS设置为已经搭建好的logstash地址，就可以将当前环境的日志集成到ELK中：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/logspout_config.png\" alt=\"ImageLogConf\"></p>\n<h2 id=\"六、Traefik与Rancher的集成\"><a href=\"#六、Traefik与Rancher的集成\" class=\"headerlink\" title=\"六、Traefik与Rancher的集成\"></a>六、Traefik与Rancher的集成</h2><p>目前看来一切都很好，对吗？的确是这样。我们提交了代码，drone自动构建镜像到harbor，自动部署到rancher，自动发送构建结果，rancher又可以帮助自动重启死掉的container，使用rancher webhook也可以实现自动弹性计算，并且可以使用yaml文件定制构建流程，定制一些report信息，当构建或部署失败时，让企业微信自动侮辱我们的小伙伴……</p>\n<p>可是据说微服务还讲究服务注册和服务发现，如果并不想动用Zookeeper这样的核武器（就像我们不想用Kong一样，一是有一定学习和维护成本，二是Logo越改越丑），那就需要找到一个轻量级，能满足需求的替代品。况且目前并没有遇到需要削峰的处理。</p>\n<p>对于域名的解析，我们选择使用<a href=\"https://traefik.io/\">Traefik</a>作为LB，这个同样使用Golang编写，同样拥有将近13,000 Stars，并且兼具简单的服务注册和服务发现功能。更值得一提的是，Rancher catalog里的Traefik非常友好的集成了Let’s Encrypt（ACME）的功能，可以做到自动申请SSL证书，过期自动续期。当然，不推荐在生产环境使用，SSL免费证书的数量非常容易达到阈值而使得域名无法访问。</p>\n<p>Traefik内部架构图(Image from traefik.io)：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik-processer.png\" alt=\"ImageTraefikInternal\"></p>\n<p>如何安装Traefik呢？我们以Rancher catalog中的Traefik为例（不使用ACME）：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_config.png\" alt=\"ImageTraefikConfig\"></p>\n<p>我们的目的是做域名解析，integration mode应该设置为<strong>external</strong>。Http Port设置为80，Https Port设置为443，Admin Port可以根据自己实际情况填写，默认8000。</p>\n<p>此时的Traefik已经准备就绪，但是打开traefik_host:8000查看控制面板时，发现Traefik并没有做任何代理。原因是需要在代理的目标中，使用rancher labels标示出traefik的代理方式。</p>\n<p>比如刚才安装的Drone，如果我们想代理到drone.company.com这个域名，则需要在drone server的container中设置lables：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_proxy.png\" alt=\"ImageTraefikProxy\"></p>\n<ul>\n<li>traefik.enable=true 表示启用traefik代理</li>\n<li>traefik.domain=company.com 表示traefik代理的根域名</li>\n<li>traefik.port=8000 表示这个container对外暴露的端口</li>\n<li>traefik.alias=drone 表示想将drone server这个container解析为drone.company.com</li>\n</ul>\n<p>需要注意的是，traefik.alias有可能导致重复解析，同时traefik有自己的一套默认解析规范。更详细的文档请看GitHub 地址：<a href=\"https://github.com/rawmind0/alpine-traefik\">rawmind0/alpine-traefik</a></p>\n<p>在设置rancher labels后，可以看到Traefik的控制面板中，已经注册了服务地址：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-admin.png\" alt=\"ImageTraefikAdmin\"></p>\n<p>利用Traefik的这个特性和Rancher对于Container的弹性计算，可以做到简单的服务注册和服务发现。</p>\n<p>最后需要在域名服务商那里做A记录解析，解析的IP地址应为Traefik的公网地址。<br>因为域名解析的默认端口是80和443，后面发生的事情就和Nginx的作用一毛一样了。域名解析到Traefik服务器的80端口（https则是443），Traefik发现这个域名已经注册到服务中，于是代理到10.xx开头的虚拟IP，转发请求并发送response。与Nginx Conf如出一辙：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/domain-proxy.png\" alt=\"ImageTraefikDomain\"></p>\n<p>至此，我们已经完全实现从代码提交，到自动部署以及域名解析的自动化。在生产环境的Traefik on Rancher中开启Https，可以把ssl的整个信任链以文本的形式粘贴进去，同时修改Traefik的Https选项为true即可：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_prod.png\" alt=\"ImageTraefikProd\"></p>\n<p>另外，Traefik并不是LB/Proxy的唯一选择，甚至不是最酷的选择，但确是目前与Rancher集成最好的。下面图中的程序都值得做调研（可以小小的注意一下istio，天庭饱满，骨骼轻奇，这还只是2017年7月底的数据……）：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/Proxy%20Stars.jpeg\" alt=\"ImageProxyStars\"></p>\n<blockquote>\n<p>事实上对于Traefik我们是又爱又恨。它能非常方便的与Rancher集成，功能简便强大，性能可观。但在最开始着实踩了不少坑，一度打算放弃并回归到传统的Nginx做反向代理的方式，甚至写了PR并被merge到master中。截止目前Rancher catalog中最新的1.5版本，已经是一个真正稳定可用的版本了。</p>\n</blockquote>\n<h2 id=\"七、小技巧\"><a href=\"#七、小技巧\" class=\"headerlink\" title=\"七、小技巧\"></a>七、小技巧</h2><p>Node.js的项目中书写Dockerfile时，经常会用到yarn或者npm i来拉取依赖包。但npm的服务器远在世界的另一端，这时可以使用淘宝的镜像进行加速。通常我们在本地开发时执行会记得加上npm镜像，在服务器上跑Dockerfile也是一样的道理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:alpine</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY package.json .</span><br><span class=\"line\">RUN npm i --registry https://registry.npm.taobao.org</span><br><span class=\"line\">COPY . .</span><br><span class=\"line\">CMD [ <span class=\"string\">&quot;node&quot;</span>, <span class=\"string\">&quot;bin/www&quot;</span> ]</span><br></pre></td></tr></table></figure>\n\n<p>Drone在构建镜像并推送到镜像仓库时，需要根据Dockerfile的基础镜像进行构建，而docker服务器也远在世界的另一端，同样的可以使用mirror来指定镜像仓库，并尽量使用alpine镜像缩小体积：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline:</span><br><span class=\"line\">  build_step:</span><br><span class=\"line\">    image: plugins/docker</span><br><span class=\"line\">    username: harbor_name</span><br><span class=\"line\">    password: harbor_pwd</span><br><span class=\"line\">    registry: harbor.company.com</span><br><span class=\"line\">    repo: harbor.company.com/repo/<span class=\"built_in\">test</span></span><br><span class=\"line\">    mirror: <span class=\"string\">&#x27;https://registry.docker-cn.com&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>作大死命令，不要在服务器上使用。但本地开发很好用。意思是停止所有container，删除所有container，删除所有image：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -aq) &amp;&amp; docker rm $(docker ps -aq) &amp;&amp; docker rmi $(docker images -aq)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八、结语，附带工具链汇总\"><a href=\"#八、结语，附带工具链汇总\" class=\"headerlink\" title=\"八、结语，附带工具链汇总\"></a>八、结语，附带工具链汇总</h2><p>罗马不是一天建成，万丈高楼平地起。在企业发展之初，我们在打基础的同时，也要保证项目高速迭代。短时间内无法做到Netflix的体量以及其对于微服务治理的精妙，在运作的细节中也有诸多需要完善的部分，例如BDD、TDD的实践，传统意义上的UAT与蓝绿灰度发布，移动时代的全链路日志，服务熔断、隔离、限流以及降级的能力，亦或是星火燎原的Service Mesh……所以退一步讲，必须先生存，才能生活。我们可以允许服务死掉，但是要保证无感知或极短感知的情况下，服务能迅速的活过来。</p>\n<p>在持续交付的过程中，我们也尝试使用sonar代码质量管理，使用phabricator作为code review环节，因为配置的变更和微服务数量的逐渐增多，配置中心(主要考虑携程的Apollo)的引入也迫在眉睫，调用链监控以及代码重新埋点的成本(二节所述npm package rpc的优势又可体现)是否能抵过其带来的好处等等。但因目前尚未达到一个非常成熟的阶段，所以本次不再分享，仅表述其名来启发各位聪明的小伙伴。</p>\n<p>除此之外，技术视野的成长也非朝夕。就像我国政府在大家买不起自行车时就开始修建高速公路，时至今日，还能说它是面子(KPI)工程吗？与社区一同进步，开阔视野的同时，保持独立思考的能力，是比上述所有更为重要的技能。</p>\n<p>回到本文开头所写，一切都是赶鸭子上架。与其说笔者天资聪慧才貌过人风度翩翩儒雅风流，不如说这都是被逼的。同事抱怨流程繁琐不直观，若要做到代码和咖啡那样大繁若简，就需要思考CI/CD的目的与本质。大智若愚，真正的天才，必须能够让事情变得简单。</p>\n<p>Rancher: <a href=\"https://github.com/rancher/rancher\">rancher/rancher</a></p>\n<p>Drone: <a href=\"https://github.com/drone/drone\">drone/drone</a></p>\n<p>Drone企业微信API插件: <a href=\"https://github.com/clem109/drone-wechat\">clem109/drone-wechat</a></p>\n<p>Harbor: <a href=\"https://github.com/vmware/harbor\">vmware/harbor</a></p>\n<p>Traefik: <a href=\"https://github.com/containous/traefik\">containous/traefik</a></p>\n<p>Phabricator: <a href=\"https://github.com/phacility/phabricator\">phacility/phabricator</a></p>\n<p>SonarQube: <a href=\"https://github.com/SonarSource/sonarqube\">SonarSource/sonarqube</a></p>\n<p>Logspout: <a href=\"https://github.com/gliderlabs/logspout\">gliderlabs/logspout</a></p>\n<p>配置中心(携程做的，代码写的还不错): <a href=\"https://github.com/ctripcorp/apollo\">ctripcorp/apollo</a></p>\n<p>SuperSet(BI): <a href=\"https://github.com/apache/incubator-superset\">apache/incubator-superset</a></p>\n","site":{"data":{}},"excerpt":"<p>本文默认已经安装好了Rancher，如果没有安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --restart=unless-stopped -p 8080:8080 rancher/server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"零、前言\"><a href=\"#零、前言\" class=\"headerlink\" title=\"零、前言\"></a>零、前言</h2><p>相信我，一切事情的发生都是赶鸭子上架，没有例外。人类所有伟大的变革都是迫不得已，可又是那么顺其自然。比如容器（docker）技术的诞生，比如箭在弦上的创业，比如野心勃勃的kubernetes，比如如今已作为左膀右臂的rancher，比如这篇文章。</p>\n<p>不同于阿里云的CI/CD实践（<a href=\"https://mp.weixin.qq.com/s/vhpmqJVJpnqQkSdp2oGhOg\">如何利用Docker构建基于DevOps的全自动CI</a>），我们结合自身状况，构建了一套我们自己的DevOps CI/CD流程，更轻更小，更适合Startup。</p>","more":"<h2 id=\"一、合适的才是最好的（Node-js-amp-Docker）\"><a href=\"#一、合适的才是最好的（Node-js-amp-Docker）\" class=\"headerlink\" title=\"一、合适的才是最好的（Node.js &amp; Docker）\"></a>一、合适的才是最好的（Node.js &amp; Docker）</h2><p>如果世界只有FLAG、BAT，那就太无趣了。iHealth是一家初创型公司，我所在的部门有大概10名研发人员，在担负着三端研发工作的同时，所有围绕服务的交付和运维工作也都是我们来做。</p>\n<p>技术的选型上，服务端、Web端和移动端（Android、iOS）都要上，但人少。所以招人的时候并没有以貌取人的资格，部门对外的Title都是全栈。能一门语言通吃三端，群众基础广泛，恐怕没有比Javascript/Typescript(Node.js)更合适的了。</p>\n<p>服务端有Express、Koa、Feather、Nest、Meteor等各有其长的框架，前端大而火的Reactjs、Vuejs和Angular，不管是Server Render还是前后端分离，都可以得心应手。因为公司的健康设备（血糖仪、血压计、体温计、血氧、体脂秤等等）会有专门的部门研发设计以及提供SDK，所以移动端的研发工作更多是在设计实现和性能优化上，React Native是一枚大杀器。虽然现在公司并没有桌面端的需求，但不能否认的是Electron是一个很有趣的项目，也为“全栈”这个词增加了更多背书。</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/js-fullstack.png\" alt=\"ImageJsStack\"></p>\n<p>另外，选择使用Node/Js/Ts作为全栈的基础会附带有RPC的好处。无需集成传统意义上的RPC框架（如gRPC），只需在编写远程(微)服务方法时，编写相应的npm package，也可以达到相同的目的，且成本更小，更易理解。</p>\n<p>运维环境的选型上，所有的业务都运行在云端，省去了机房维护和服务器运维的成本。其实在盘古开荒时，我们也是编写了Node程序后，使用PM2部署在服务器上，并没有使用Docker。当然也存在没有使用Docker所带来的一切问题：三端不同步、环境无法隔离……而Docker带给我最大的惊喜除了超强的可移植性，更在于研发人员可以非常容易对程序的顶级架构进行推理。</p>\n<p>事实上，我们直接使用docker-compose做容器编排着实有一段时间，在一次大规模的服务器迁移中，发现需要重新思考越来越多的container管理和更完善的编排方案。Rancher（Cattle）就是在这时被应用到技术栈中。</p>\n<h2 id=\"二、一切从Github开始\"><a href=\"#二、一切从Github开始\" class=\"headerlink\" title=\"二、一切从Github开始\"></a>二、一切从Github开始</h2><p>在运维环境一波三折的同时，DevOps的征程也是亦步亦趋，步步惊心。幸运的是，我们知道自己缺乏什么，想要什么，所以能比较容易的做到“哪里不会点哪里”。如同上一章节所述，合适的才是最好的。持续集成（CI）与持续交付（CD）的迭代过程，从最初的代码拷贝，到结合docker-compose与rsync命令，到使用CI/CD工具，做到相对意义上的自动化……迄今为止，我们摸索出一套相对好用并且好玩的流程。</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/devops-srctions.png\" alt=\"ImageDevOps\"></p>\n<p>故事大致是这样的，当一只代码猴提交代码之后，他需要去接一杯咖啡。在猫屎氤氲的雾气里45°角仰望天花板，手机微信提醒这次构建成功（或失败，并附带污言秽语）。这时他可以开始往工位走，坐下时，微信又会提醒本次部署到Rancher成功（或失败）。</p>\n<p>这一切开始的地方是github。当开发者写完 <del>BUG</del> 功能之后，需要有地方保存这些宝贵的资料。之所以没有使用Gitlab或Bitbucket搭建私有的Git服务器，是因为我们认为代码是最直接的价值体现。服务如骨架，终端如皮肤，UE如衣服，三者组成让人赏心悦目的风景，代码是这背后的基础。我们认为在团队精力无法更分散、人口规模尚小时，购买Github的商业版是稳妥且必要的，毕竟那帮人修复一次故障就像把网线拔下来再插上那样简单。</p>\n<h2 id=\"三、Drone-CI\"><a href=\"#三、Drone-CI\" class=\"headerlink\" title=\"三、Drone CI\"></a>三、Drone CI</h2><p>Drone这个单词在翻译中译作雄蜂、无人机。我特意咨询了一位精通一千零二十四国语言的英国朋友，说这个词的意思是autonomous，works by itself。白话就是有活它自己干，而且是自主的。不过这个解释对于Drone来说名副其实。这个在<a href=\"https://github.com/drone/drone\">Github</a>上拥有13,000+ Stars的开源项目，使用Golang编写，相比Jenkins的大而全，Drone是为Docker而生的CI软件。如果有使用过Gitlab CI的小伙伴，相信对Drone的使用方式不会感到陌生，他们都是使用Yaml风格文件来定义pipeline：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pipeline:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">node:latest</span></span><br><span class=\"line\">    <span class=\"attr\">commands:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">lint</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">publish:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">plugins/npm</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span></span><br><span class=\"line\">      <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n\n<p>Drone的安装方式如同Rancher一样简单，一行docker命令即可。当然，大家也可以看<a href=\"http://docs.drone.io/\">Drone的官方文档</a>，在这里，只讲一下使用Rancher catalog安装Drone的方式：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-install.png\" alt=\"ImageDroneInstall\"></p>\n<p>查看大图大家可以看到Drone使用Rancher catalog安装的方法（with github），在Github 的Settings中创建Drone的OAuth App时，Home Page Url务必要写你能访问Drone的IP地址或域名，例如：</p>\n<blockquote>\n<p><a href=\"http://drone.company.com/\">http://drone.company.com</a></p>\n</blockquote>\n<p>而OAuth App的Authorization callback URL应该对应上面的写法：</p>\n<blockquote>\n<p><a href=\"http://drone.company.com/authorize\">http://drone.company.com/authorize</a></p>\n</blockquote>\n<p>小功告成：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone_installed.png\" alt=\"ImageDroneInstalled\"></p>\n<p>登录进Drone之后，在Repositories中找到你想要开启CI的Git Repo，用switch按钮打开它：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-switch-repo.png\" alt=\"ImageDroneSwitched\"></p>\n<p>这表示已经打开了Drone对于这个Repo的webhook，当有代码提交时，Drone会检测这个Repo的根目录中是否包含.drone.yml文件，如果存在，则根据yaml文件定义的pipeline执行CI流程。</p>\n<h2 id=\"四、Drone与rancher、harbor、企业微信的集成\"><a href=\"#四、Drone与rancher、harbor、企业微信的集成\" class=\"headerlink\" title=\"四、Drone与rancher、harbor、企业微信的集成\"></a>四、Drone与rancher、harbor、企业微信的集成</h2><p>在决定使用Drone之前，需要知道的是，Drone是一个高度依赖社区的项目。其文档诸多不完善（完善过，版本迭代，文档跟不上了），plugins质量良莠。但对于擅长Github issue、Google、Stackoverflow的朋友来说，这并不是特别困难的事情。Drone也有付费版本，无需自己提供服务器，而是像Github那样作为服务使用。</p>\n<p>如果你决定开始使用Drone，截止到上面的步骤，我们打开了Drone对于Github Repo的监听，再次提醒，需要在代码repo的根目录包含.drone.yml文件，才会真正触发Drone的pipeline。</p>\n<p>那么，如果想重现上面故事中的场景，应该如何进行集成呢？</p>\n<p>我司在构建CI/CD的过程中，现使用Harbor作为私有镜像仓库，从提交代码到自动部署到Rancher，其实应当经历如下步骤：</p>\n<ul>\n<li>提交代码，触发Github Webhook</li>\n<li>Drone使用docker插件，根据Dockerfile构建镜像，并推送到Harbor中</li>\n<li>Drone使用rancher插件，根据stack/service，部署上面构建好的image</li>\n<li>Drone使用企业微信插件，报告部署结果</li>\n</ul>\n<p>在这里节选公司项目中的一段yaml代码，描述了上述步骤：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .drone.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">pipeline:</span></span><br><span class=\"line\">  <span class=\"comment\"># 使用plugins/docker插件，构建镜像，推送到harbor</span></span><br><span class=\"line\">  <span class=\"attr\">build_step:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">plugins/docker</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">harbor_username</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">harbor_password</span></span><br><span class=\"line\">    <span class=\"attr\">registry:</span> <span class=\"string\">harbor.company.com</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">harbor.company.com/registry/test</span></span><br><span class=\"line\">    <span class=\"attr\">mirror:</span> <span class=\"string\">&#x27;https://registry.docker-cn.com&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">tag:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">dev</span></span><br><span class=\"line\">    <span class=\"attr\">dockerfile:</span> <span class=\"string\">Dockerfile</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span></span><br><span class=\"line\">      <span class=\"attr\">branch:</span> <span class=\"string\">develop</span></span><br><span class=\"line\">      <span class=\"attr\">event:</span> <span class=\"string\">push</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># 使用rancher插件，自动更新实例</span></span><br><span class=\"line\">  <span class=\"attr\">rancher:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">peloton/drone-rancher</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">&#x27;http://rancher.company.com/v2-beta/projects/1a870&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">access_key:</span> <span class=\"string\">rancher</span> <span class=\"string\">access</span> <span class=\"string\">key</span></span><br><span class=\"line\">    <span class=\"attr\">secret_key:</span> <span class=\"string\">rancher</span> <span class=\"string\">secret</span> <span class=\"string\">key</span></span><br><span class=\"line\">    <span class=\"attr\">service:</span> <span class=\"string\">rancher_stack/rancher_service</span></span><br><span class=\"line\">    <span class=\"attr\">docker_image:</span> <span class=\"string\">&#x27;harbor.company.com/registry/test:dev&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">batch_size:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"number\">600</span></span><br><span class=\"line\">    <span class=\"attr\">confirm:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span></span><br><span class=\"line\">      <span class=\"attr\">branch:</span> <span class=\"string\">develop</span></span><br><span class=\"line\">      <span class=\"attr\">event:</span> <span class=\"string\">push</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"comment\"># 使用clem109/drone-wechat插件，报告到企业微信</span></span><br><span class=\"line\">  <span class=\"attr\">report-deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">clem109/drone-wechat</span></span><br><span class=\"line\">    <span class=\"attr\">secrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">plugin_corp_secret</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">plugin_corpid</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">plugin_agent_id</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">&#x27;$&#123;DRONE_REPO_NAME&#125;&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">|</span></span><br><span class=\"line\">      <span class=\"string\">构建序列:</span> <span class=\"string\">$&#123;DRONE_BUILD_NUMBER&#125;</span> <span class=\"string\">部署成功，干得好$&#123;DRONE_COMMIT_AUTHOR&#125;</span> <span class=\"string\">！</span></span><br><span class=\"line\">      <span class=\"string\">更新内容:</span> <span class=\"string\">$&#123;DRONE_COMMIT_MESSAGE&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">msg_url:</span> <span class=\"string\">&#x27;http://project.company.com&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">btn_txt:</span> <span class=\"string\">点击前往</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span></span><br><span class=\"line\">      <span class=\"attr\">branch:</span> <span class=\"string\">develop</span></span><br><span class=\"line\">      <span class=\"attr\">status:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">success</span></span><br></pre></td></tr></table></figure>\n\n<p>对接企业微信之前，需要在企业微信中新建自定义应用，比如我们的应用名字叫Drone CI/CD。当然，您也可以给每一个项目创建一个企业微信App，这样虽然麻烦，但是可以让需要关注该项目的人关注到构建信息。</p>\n<p>下面是企业微信测试的截图：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/workwechat-report.png\" alt=\"ImageDroneBuilded\"></p>\n<p>企业微信与微信客户端是连通的，可玩性还不错：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-notify.jpeg\" alt=\"ImageWechatNotify\"></p>\n<p>在这里我认为有必要提醒一下，使用Drone的企业微信插件时，不要使用Drone Plugins列表里的企业微信。翻阅其源码可以发现，其中一个函数会将企业的敏感信息发送至私人服务器。不管作者本身是出于BaaS的好意，还是其它想法，我认为都是不妥的：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/bad-code.png\" alt=\"ImageDroneWrokwchatBadCode\"></p>\n<p>代码地址：<a href=\"https://github.com/lizheming/drone-wechat/blob/master/index.js\">https://github.com/lizheming/drone-wechat/blob/master/index.js</a></p>\n<p>在此Drone Plugins里的企业微信插件出现很久之前，我的好友Clément 克雷蒙同学写了一个企业微信插件，至今仍在使用。欢迎检查源代码，提issue提bug，为了不让克雷蒙同学骄傲，我并不打算号召大家给他star：<a href=\"https://github.com/clem109/drone-wechat\">clem109/drone-wechat</a></p>\n<p>而在构建完成后，可以看到Drone控制面板里小伙伴们战斗过的痕迹：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-records.png\" alt=\"ImageDroneRecords\"></p>\n<h2 id=\"五、ELK与Rancher的集成\"><a href=\"#五、ELK与Rancher的集成\" class=\"headerlink\" title=\"五、ELK与Rancher的集成\"></a>五、ELK与Rancher的集成</h2><p>ELK是ElasticSearch、Logstash与Kibana的集合，是一套非常强大的分布式日志方案。ELK的使用更多在于其本身的优化以及Kibana面向业务时的使用，这本身是一个很大的话题，只ElasticSearch就有许多奇技淫巧。因为人力资源的原因，我们使用了兄弟部门搭建的ELK，等同于使用已有的ELK服务。所以在此也不再赘述ELK的搭建，网上有许多资源可供参考。</p>\n<p>在这里要做的事情，就是把rancher中的日志归集到已有的ELK中。</p>\n<p>在rancher的catalog中找到logspout，这是一个logstash的adapter，为docker而生：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/logspout_logs.png\" alt=\"ImageLogRun\"></p>\n<p>在配置中设置LOGSPOUT=ignore，然后把ROUTE_URIS设置为已经搭建好的logstash地址，就可以将当前环境的日志集成到ELK中：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/logspout_config.png\" alt=\"ImageLogConf\"></p>\n<h2 id=\"六、Traefik与Rancher的集成\"><a href=\"#六、Traefik与Rancher的集成\" class=\"headerlink\" title=\"六、Traefik与Rancher的集成\"></a>六、Traefik与Rancher的集成</h2><p>目前看来一切都很好，对吗？的确是这样。我们提交了代码，drone自动构建镜像到harbor，自动部署到rancher，自动发送构建结果，rancher又可以帮助自动重启死掉的container，使用rancher webhook也可以实现自动弹性计算，并且可以使用yaml文件定制构建流程，定制一些report信息，当构建或部署失败时，让企业微信自动侮辱我们的小伙伴……</p>\n<p>可是据说微服务还讲究服务注册和服务发现，如果并不想动用Zookeeper这样的核武器（就像我们不想用Kong一样，一是有一定学习和维护成本，二是Logo越改越丑），那就需要找到一个轻量级，能满足需求的替代品。况且目前并没有遇到需要削峰的处理。</p>\n<p>对于域名的解析，我们选择使用<a href=\"https://traefik.io/\">Traefik</a>作为LB，这个同样使用Golang编写，同样拥有将近13,000 Stars，并且兼具简单的服务注册和服务发现功能。更值得一提的是，Rancher catalog里的Traefik非常友好的集成了Let’s Encrypt（ACME）的功能，可以做到自动申请SSL证书，过期自动续期。当然，不推荐在生产环境使用，SSL免费证书的数量非常容易达到阈值而使得域名无法访问。</p>\n<p>Traefik内部架构图(Image from traefik.io)：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik-processer.png\" alt=\"ImageTraefikInternal\"></p>\n<p>如何安装Traefik呢？我们以Rancher catalog中的Traefik为例（不使用ACME）：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_config.png\" alt=\"ImageTraefikConfig\"></p>\n<p>我们的目的是做域名解析，integration mode应该设置为<strong>external</strong>。Http Port设置为80，Https Port设置为443，Admin Port可以根据自己实际情况填写，默认8000。</p>\n<p>此时的Traefik已经准备就绪，但是打开traefik_host:8000查看控制面板时，发现Traefik并没有做任何代理。原因是需要在代理的目标中，使用rancher labels标示出traefik的代理方式。</p>\n<p>比如刚才安装的Drone，如果我们想代理到drone.company.com这个域名，则需要在drone server的container中设置lables：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_proxy.png\" alt=\"ImageTraefikProxy\"></p>\n<ul>\n<li>traefik.enable=true 表示启用traefik代理</li>\n<li>traefik.domain=company.com 表示traefik代理的根域名</li>\n<li>traefik.port=8000 表示这个container对外暴露的端口</li>\n<li>traefik.alias=drone 表示想将drone server这个container解析为drone.company.com</li>\n</ul>\n<p>需要注意的是，traefik.alias有可能导致重复解析，同时traefik有自己的一套默认解析规范。更详细的文档请看GitHub 地址：<a href=\"https://github.com/rawmind0/alpine-traefik\">rawmind0/alpine-traefik</a></p>\n<p>在设置rancher labels后，可以看到Traefik的控制面板中，已经注册了服务地址：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/drone-admin.png\" alt=\"ImageTraefikAdmin\"></p>\n<p>利用Traefik的这个特性和Rancher对于Container的弹性计算，可以做到简单的服务注册和服务发现。</p>\n<p>最后需要在域名服务商那里做A记录解析，解析的IP地址应为Traefik的公网地址。<br>因为域名解析的默认端口是80和443，后面发生的事情就和Nginx的作用一毛一样了。域名解析到Traefik服务器的80端口（https则是443），Traefik发现这个域名已经注册到服务中，于是代理到10.xx开头的虚拟IP，转发请求并发送response。与Nginx Conf如出一辙：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/domain-proxy.png\" alt=\"ImageTraefikDomain\"></p>\n<p>至此，我们已经完全实现从代码提交，到自动部署以及域名解析的自动化。在生产环境的Traefik on Rancher中开启Https，可以把ssl的整个信任链以文本的形式粘贴进去，同时修改Traefik的Https选项为true即可：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/traefik_prod.png\" alt=\"ImageTraefikProd\"></p>\n<p>另外，Traefik并不是LB/Proxy的唯一选择，甚至不是最酷的选择，但确是目前与Rancher集成最好的。下面图中的程序都值得做调研（可以小小的注意一下istio，天庭饱满，骨骼轻奇，这还只是2017年7月底的数据……）：</p>\n<p><img src=\"https://raw.githubusercontent.com/sirius1024/rancher-dev-demo/master/public/images/Proxy%20Stars.jpeg\" alt=\"ImageProxyStars\"></p>\n<blockquote>\n<p>事实上对于Traefik我们是又爱又恨。它能非常方便的与Rancher集成，功能简便强大，性能可观。但在最开始着实踩了不少坑，一度打算放弃并回归到传统的Nginx做反向代理的方式，甚至写了PR并被merge到master中。截止目前Rancher catalog中最新的1.5版本，已经是一个真正稳定可用的版本了。</p>\n</blockquote>\n<h2 id=\"七、小技巧\"><a href=\"#七、小技巧\" class=\"headerlink\" title=\"七、小技巧\"></a>七、小技巧</h2><p>Node.js的项目中书写Dockerfile时，经常会用到yarn或者npm i来拉取依赖包。但npm的服务器远在世界的另一端，这时可以使用淘宝的镜像进行加速。通常我们在本地开发时执行会记得加上npm镜像，在服务器上跑Dockerfile也是一样的道理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:alpine</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY package.json .</span><br><span class=\"line\">RUN npm i --registry https://registry.npm.taobao.org</span><br><span class=\"line\">COPY . .</span><br><span class=\"line\">CMD [ <span class=\"string\">&quot;node&quot;</span>, <span class=\"string\">&quot;bin/www&quot;</span> ]</span><br></pre></td></tr></table></figure>\n\n<p>Drone在构建镜像并推送到镜像仓库时，需要根据Dockerfile的基础镜像进行构建，而docker服务器也远在世界的另一端，同样的可以使用mirror来指定镜像仓库，并尽量使用alpine镜像缩小体积：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline:</span><br><span class=\"line\">  build_step:</span><br><span class=\"line\">    image: plugins/docker</span><br><span class=\"line\">    username: harbor_name</span><br><span class=\"line\">    password: harbor_pwd</span><br><span class=\"line\">    registry: harbor.company.com</span><br><span class=\"line\">    repo: harbor.company.com/repo/<span class=\"built_in\">test</span></span><br><span class=\"line\">    mirror: <span class=\"string\">&#x27;https://registry.docker-cn.com&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>作大死命令，不要在服务器上使用。但本地开发很好用。意思是停止所有container，删除所有container，删除所有image：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -aq) &amp;&amp; docker rm $(docker ps -aq) &amp;&amp; docker rmi $(docker images -aq)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八、结语，附带工具链汇总\"><a href=\"#八、结语，附带工具链汇总\" class=\"headerlink\" title=\"八、结语，附带工具链汇总\"></a>八、结语，附带工具链汇总</h2><p>罗马不是一天建成，万丈高楼平地起。在企业发展之初，我们在打基础的同时，也要保证项目高速迭代。短时间内无法做到Netflix的体量以及其对于微服务治理的精妙，在运作的细节中也有诸多需要完善的部分，例如BDD、TDD的实践，传统意义上的UAT与蓝绿灰度发布，移动时代的全链路日志，服务熔断、隔离、限流以及降级的能力，亦或是星火燎原的Service Mesh……所以退一步讲，必须先生存，才能生活。我们可以允许服务死掉，但是要保证无感知或极短感知的情况下，服务能迅速的活过来。</p>\n<p>在持续交付的过程中，我们也尝试使用sonar代码质量管理，使用phabricator作为code review环节，因为配置的变更和微服务数量的逐渐增多，配置中心(主要考虑携程的Apollo)的引入也迫在眉睫，调用链监控以及代码重新埋点的成本(二节所述npm package rpc的优势又可体现)是否能抵过其带来的好处等等。但因目前尚未达到一个非常成熟的阶段，所以本次不再分享，仅表述其名来启发各位聪明的小伙伴。</p>\n<p>除此之外，技术视野的成长也非朝夕。就像我国政府在大家买不起自行车时就开始修建高速公路，时至今日，还能说它是面子(KPI)工程吗？与社区一同进步，开阔视野的同时，保持独立思考的能力，是比上述所有更为重要的技能。</p>\n<p>回到本文开头所写，一切都是赶鸭子上架。与其说笔者天资聪慧才貌过人风度翩翩儒雅风流，不如说这都是被逼的。同事抱怨流程繁琐不直观，若要做到代码和咖啡那样大繁若简，就需要思考CI/CD的目的与本质。大智若愚，真正的天才，必须能够让事情变得简单。</p>\n<p>Rancher: <a href=\"https://github.com/rancher/rancher\">rancher/rancher</a></p>\n<p>Drone: <a href=\"https://github.com/drone/drone\">drone/drone</a></p>\n<p>Drone企业微信API插件: <a href=\"https://github.com/clem109/drone-wechat\">clem109/drone-wechat</a></p>\n<p>Harbor: <a href=\"https://github.com/vmware/harbor\">vmware/harbor</a></p>\n<p>Traefik: <a href=\"https://github.com/containous/traefik\">containous/traefik</a></p>\n<p>Phabricator: <a href=\"https://github.com/phacility/phabricator\">phacility/phabricator</a></p>\n<p>SonarQube: <a href=\"https://github.com/SonarSource/sonarqube\">SonarSource/sonarqube</a></p>\n<p>Logspout: <a href=\"https://github.com/gliderlabs/logspout\">gliderlabs/logspout</a></p>\n<p>配置中心(携程做的，代码写的还不错): <a href=\"https://github.com/ctripcorp/apollo\">ctripcorp/apollo</a></p>\n<p>SuperSet(BI): <a href=\"https://github.com/apache/incubator-superset\">apache/incubator-superset</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckgg8680c0001exx405a7hx81","category_id":"ckgg8680g0003exx41mjy1ug1","_id":"ckgg8680j0006exx47m44829o"},{"post_id":"ckgg8680t0009exx4gf006179","category_id":"ckgg8680g0003exx41mjy1ug1","_id":"ckgg8680v000cexx4b2cxa1lu"},{"post_id":"ckgg8680u000aexx48cekguff","category_id":"ckgg8680g0003exx41mjy1ug1","_id":"ckgg8680w000dexx49k89boej"}],"PostTag":[{"post_id":"ckgg8680c0001exx405a7hx81","tag_id":"ckgg8680h0004exx4efgtfxyb","_id":"ckgg8680j0007exx4hntq35a4"},{"post_id":"ckgg8680c0001exx405a7hx81","tag_id":"ckgg8680i0005exx424hzg8u7","_id":"ckgg8680j0008exx42tj9eulr"},{"post_id":"ckgg8680t0009exx4gf006179","tag_id":"ckgg8680v000bexx4cpav89c7","_id":"ckgg8680x000iexx4a3cq9pbi"},{"post_id":"ckgg8680t0009exx4gf006179","tag_id":"ckgg8680w000eexx4hr3pdpli","_id":"ckgg8680x000jexx42r1jbqw1"},{"post_id":"ckgg8680t0009exx4gf006179","tag_id":"ckgg8680w000fexx4dsru5pqk","_id":"ckgg8680y000lexx41x9of4ph"},{"post_id":"ckgg8680t0009exx4gf006179","tag_id":"ckgg8680w000gexx45ttudvx2","_id":"ckgg8680y000mexx4feer2fjy"},{"post_id":"ckgg8680u000aexx48cekguff","tag_id":"ckgg8680x000hexx4bqxd2uby","_id":"ckgg8680z000qexx4ccxx5w1i"},{"post_id":"ckgg8680u000aexx48cekguff","tag_id":"ckgg8680x000kexx4ex3me2wk","_id":"ckgg8680z000rexx46r8sgxmy"},{"post_id":"ckgg8680u000aexx48cekguff","tag_id":"ckgg8680y000nexx48q9w2wsz","_id":"ckgg8680z000sexx49cfwbp4p"},{"post_id":"ckgg8680u000aexx48cekguff","tag_id":"ckgg8680y000oexx4ekjia1ji","_id":"ckgg8680z000texx46jml5k07"},{"post_id":"ckgg8680u000aexx48cekguff","tag_id":"ckgg8680y000pexx48uci79oc","_id":"ckgg8680z000uexx49aa7crle"}],"Tag":[{"name":"jwt","_id":"ckgg8680h0004exx4efgtfxyb"},{"name":"develop","_id":"ckgg8680i0005exx424hzg8u7"},{"name":"bash","_id":"ckgg8680v000bexx4cpav89c7"},{"name":"iterm2","_id":"ckgg8680w000eexx4hr3pdpli"},{"name":"zsh","_id":"ckgg8680w000fexx4dsru5pqk"},{"name":"shell","_id":"ckgg8680w000gexx45ttudvx2"},{"name":"devops","_id":"ckgg8680x000hexx4bqxd2uby"},{"name":"rancher","_id":"ckgg8680x000kexx4ex3me2wk"},{"name":"docker","_id":"ckgg8680y000nexx48q9w2wsz"},{"name":"ci","_id":"ckgg8680y000oexx4ekjia1ji"},{"name":"cd","_id":"ckgg8680y000pexx48uci79oc"}]}}